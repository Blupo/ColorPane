{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ColorPane \u00b6 ColorPane is a suite of color tools for designing Roblox projects. Included in this plugin are: A color editor with a color wheel, several types of sliders, and various color palettes, with the ability to create, import, and export your own palettes. A gradient editor , similar to the Studio editor, with some quality-of-life changes including keypoint snapping, buttons to swap keypoint colors around, and a gradient palette. A Color Properties panel, which lets you use the color picker and gradient editor to edit the properties of parts, UIs, or other objects in your projects. ColorPane also has an API that allows you to use these tools in your own plugins so that you don't have to create them yourself. Installing \u00b6 ColorPane is available in the plugin library here . You can also grab a release from GitHub and install it manually. If you know how to use Rojo , you can build the latest code from the develop branch to get the newest features. Keep in mind that this is development code , and things can break or change quickly.","title":"Home"},{"location":"#colorpane","text":"ColorPane is a suite of color tools for designing Roblox projects. Included in this plugin are: A color editor with a color wheel, several types of sliders, and various color palettes, with the ability to create, import, and export your own palettes. A gradient editor , similar to the Studio editor, with some quality-of-life changes including keypoint snapping, buttons to swap keypoint colors around, and a gradient palette. A Color Properties panel, which lets you use the color picker and gradient editor to edit the properties of parts, UIs, or other objects in your projects. ColorPane also has an API that allows you to use these tools in your own plugins so that you don't have to create them yourself.","title":"ColorPane"},{"location":"#installing","text":"ColorPane is available in the plugin library here . You can also grab a release from GitHub and install it manually. If you know how to use Rojo , you can build the latest code from the develop branch to get the newest features. Keep in mind that this is development code , and things can break or change quickly.","title":"Installing"},{"location":"attribution/","text":"ColorBrewer \u00b6 This product includes color specifications and designs developed by Cynthia Brewer ( http://colorbrewer.org/ ). Apache-Style Software License for ColorBrewer software and ColorBrewer Color Schemes Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The Pennsylvania State University. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions as source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. The end-user documentation included with the redistribution, if any, must include the following acknowledgment: \"This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).\" Alternately, this acknowledgment may appear in the software itself, if and wherever such third-party acknowledgments normally appear. 4. The name \"ColorBrewer\" must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact Cynthia Brewer at cbrewer@psu.edu. 5. Products derived from this software may not be called \"ColorBrewer\", nor may \"ColorBrewer\" appear in their name, without prior written permission of Cynthia Brewer. Copic \u00b6 Copic is a registered trademark of Too Corporation, Japan . @neilbartlett/color-temperature \u00b6 The implementation of the Kelvin color module is based on Neil Bartlett's color-temperature , which is licensed under the MIT License. Material Icons \u00b6 ColorPane makes extensive use of Google's Material Icons , which are licensed under the Apache License 2.0 . @roblox/roact, rodux, roact-rodux \u00b6 @roblox 's roact , rodux , and roact-rodux are included in ColorPane. They are licensed under the Apache License 2.0 . @evaera/roblox-lua-promise \u00b6 @evaera 's roblox-lua-promise is included in ColorPane. It is licensed under the MIT License . @osyrisrblx/t \u00b6 @osyrisrblx 's t is included in ColorPane. It is licensed under the MIT License .","title":"Attribution"},{"location":"attribution/#colorbrewer","text":"This product includes color specifications and designs developed by Cynthia Brewer ( http://colorbrewer.org/ ). Apache-Style Software License for ColorBrewer software and ColorBrewer Color Schemes Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The Pennsylvania State University. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions as source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. The end-user documentation included with the redistribution, if any, must include the following acknowledgment: \"This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).\" Alternately, this acknowledgment may appear in the software itself, if and wherever such third-party acknowledgments normally appear. 4. The name \"ColorBrewer\" must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact Cynthia Brewer at cbrewer@psu.edu. 5. Products derived from this software may not be called \"ColorBrewer\", nor may \"ColorBrewer\" appear in their name, without prior written permission of Cynthia Brewer.","title":"ColorBrewer"},{"location":"attribution/#copic","text":"Copic is a registered trademark of Too Corporation, Japan .","title":"Copic"},{"location":"attribution/#neilbartlettcolor-temperature","text":"The implementation of the Kelvin color module is based on Neil Bartlett's color-temperature , which is licensed under the MIT License.","title":"@neilbartlett/color-temperature"},{"location":"attribution/#material-icons","text":"ColorPane makes extensive use of Google's Material Icons , which are licensed under the Apache License 2.0 .","title":"Material Icons"},{"location":"attribution/#robloxroact-rodux-roact-rodux","text":"@roblox 's roact , rodux , and roact-rodux are included in ColorPane. They are licensed under the Apache License 2.0 .","title":"@roblox/roact, rodux, roact-rodux"},{"location":"attribution/#evaeraroblox-lua-promise","text":"@evaera 's roblox-lua-promise is included in ColorPane. It is licensed under the MIT License .","title":"@evaera/roblox-lua-promise"},{"location":"attribution/#osyrisrblxt","text":"@osyrisrblx 's t is included in ColorPane. It is licensed under the MIT License .","title":"@osyrisrblx/t"},{"location":"changelog/","text":"[0.4.1] - 2022-09-30 \u00b6 Fixed \u00b6 Fixed a bug where the HSL saturation and lightness sliders would only show a red hue (this is purely a visual bug and did not affect color selection) [0.4.0] - 2022-04-19 \u00b6 Added \u00b6 Added API.GetVersion which allows external applications to check which version of the plugin is installed Added API.PromptForGradient as a replacement for API.PromptForColorSequence , which can prompt for either Gradients or ColorSequences Added color interpolation controls and ColorSequence code exporting to the Gradient Editor Added the Color Tools section where the Color Info page used to be Added HWB, Lab, Luv, LCh(ab/uv), xyY, and XYZ to Color Info A first-time use prompt will now appear informing the user that script injection is required for exporting palettes to ModuleScripts and the API Added a warning in the export dialog that script injection is required for exporting palettes to ModuleScripts Added a color sorter that uses CIEDE2000 in the Color Tools section Added a Picular palette (idea from csqrl's Picular plugin ) Added a Gradient picker tool which allows users to pick colors from their gradients Color Properties now shows the color type of the each property Right-clicking on a property in Color Properties now shows a menu to view the property documentation Mouse drag inputs now work outside of editor windows Changed \u00b6 API.PromptForColor now allows for prompting either Colors or Color3s Improved keypoint dragging behaviour in the Gradient Editor Improved performance (probably) API.PromptForColor and API.PromptForGradient now reject with PromptErrors instead of message strings Checking for updates now gracefully handles errors Checking for updates no longer does excess work if an update notice has already been shown Changed the message when notifying the user that a new version is available Moved the Color Variations palette to the Color Tools section API injection is now automatically done at startup Releases now contain binary (rbxm) files, so file size is reduced Terrain material color properties were renamed to \"[Material] Material\" (e.g. \"Asphalt Material\") from \"[Material] Color\" (e.g. \"Asphalt Color\") Fixed \u00b6 Exporting palettes now lists color components correctly (components were listed in the order R BG instead of R GB ) Changing palettes now deselects the selected color Changing palettes in the export dialog now correctly persists the export type Scrollbars no longer interfere with mouse drag inputs Deprecated \u00b6 API.PromptForColorSequence has been deprecated, please use API.PromptForGradient for new work API.IsColorSequenceEditorOpen has been deprecated, please use API.IsGradientEditorOpen for new work Removed \u00b6 The \" Preview color changes before applying them when using Color Properties \" setting was removed [0.3.1] - 2021-12-09 \u00b6 Fixed \u00b6 Fixed a bug where trying to use the scroll wheel on a dropdown selector (e.g. slider or palette pickers) resulted in a blank page [0.3.0] - 2021-07-21 \u00b6 Added \u00b6 Added the ability to import palettes from ModuleScripts, StringValues, JSON files, or URLs Added the ability to export palettes as ModuleScripts or StringValues Users will now be notified at startup if their version of ColorPane is out-of-date, with the option to disable this in the Settings Added a palette showing variations of the selected color, including hues, shades, tints, and tones Added a Copic color palette Holding down either Shift key when selecting the option to delete a palette will now bypass the confirmation dialog Users can now use the arrow keys to traverse palettes when a color is selected, as well as switch between keypoints in the ColorSequence editor when one is selected Setting data will now automatically save instead of only when the plugin is unloaded or when the Settings window is closed, with options to disable this or modify the interval in the Settings Users now have the option to cache the Roblox API data so that Color Properties can be used during testing or offline with the \"Cache Roblox API data\" setting Added a gradient palette Added a toolbar button to summon the Gradient Editor Added a setting to toggle previewing color changes before applying them when using Color Properties Fixed \u00b6 Fixed a bug that occurred when the API script was modified while the API wasn't loaded Fixed a bug where trying to use the scroll wheel on the palette page picker would break the palettes page if the user didn't have any User Palettes Fixed a bug that occurred if Color Properties tried referencing an object property that existed in the API dump but didn't exist on the object, most likely because the Studio and API dump versions were mismatched Fixed a bug that occurred when a text input was focused and destroyed due to a re-render Changed \u00b6 Testing sessions (e.g. Play Solo) can no longer modify settings or write data to disk Changed the behaviour for data writing when multiple Studio sessions are open Modified some setting descriptions to more accurately reflect what they actually do Changed the \"Load API\" toolbar button's text and description to more accurately reflect what it actually does Color Properties now shows a notice if the selection has no color properties instead of showing a blank window Several text inputs, mainly for color components, will now select their entire text when you focus on them Palette search will now update as the search text changes and no longer requires the user to release the TextBox's focus Text inputs will now respond to overflow text and changes to the cursor position When adding a new color to a palette, the search query will reset and the new color will be selected Changed the icons for the Color and Gradient Editor toolbar buttons Differentiated the icon denoting a removal from a subtraction Removed the 99 quick palette color limit Settings will now visually indicate to the user if saving is disabled [0.2.1] - 2021-03-29 \u00b6 Fixed \u00b6 The Color Properties window no longer tries to load in testing modes The Color Properties window will now show the loading screen if it is enabled on startup instead of being blank [0.2.0] - 2021-03-29 \u00b6 Added \u00b6 Added a Settings window Integrated the functionality of ColorProps into ColorPane, with the option to automatically load the window at startup in the Settings You can now view palettes in either a grid or list layout Added a palette of web colors Added sections to the palette list to distinguish between built-in and user-created palettes Added an editor page that lets you copy/paste between different color types Changed \u00b6 API loading is no longer occurs at startup by default, the user must now explicitly load it or set the option to automatically load it in the Settings Color Properties: You can now click anywhere inside a property list item to edit the color, not just on the item's color indicator Changed the behaviour of the palette grid double-click shortcut: clicking on the color at any time after it has been selected will set the current color, not just within the amount of time that would be considered a \"double click\" When searching for a palette color, if the selected color is included in the filtered list, it will now stay selected instead of being deselected You will now be asked to input a name before creating new palettes, with the option to disable this in the Settings The palette naming prompt will now show you what the actual new name will be if the inputted name is already being used Fixed \u00b6 The titles of the editor windows now reset to an identifiable name once they are closed Setting the initial prompt value when calling PromptForColor no longer causes OnColorChanged to be called Improved the performance of multiple components, the effects of which will be particularly noticable when resizing editor windows or using the palettes page The editor page bar in the color editor window now correctly highlights the currently-chosen editor page Editor pages in the color editor now have the proper minimum width, previously the calculations did not take padding into account and ended up making them slightly smaller than the minimum Fixed improper behaviour in the color wheel due to some misplaced code: the color value should have updated when the left mouse button was pressed down on the saturation-brightness square, however it occurred when the mouse button was released instead If you close the Color Properties window while editing a property, the color editor window(s) should now close Removed \u00b6 Removed the undocumented OpenColorEditor function from the API Removed the name restrictions on user-created palettes [0.1.2] - 2021-03-10 \u00b6 Added \u00b6 Added a toolbar button that lets the user attempt to drop the API script into CoreGui if it could not be done automatically Added toolbar button icons Added a warning when modifying the API script's Source Changed \u00b6 Updated and fixed some documentation Changed the name of the color editor toolbar button to \"Color Editor\" (from just \"Editor\") Removed \u00b6 Removed the undocumented OpenColorSequenceEditor function from the API ( OpenColorEditor will be removed in future update) [0.1.1] - 2021-03-09 \u00b6 Changed \u00b6 Now gracefully handles script injection [0.1.0] - 2021-03-09 \u00b6 Added \u00b6 ColorPane first release","title":"Changelog"},{"location":"changelog/#041-2022-09-30","text":"","title":"[0.4.1] - 2022-09-30"},{"location":"changelog/#fixed","text":"Fixed a bug where the HSL saturation and lightness sliders would only show a red hue (this is purely a visual bug and did not affect color selection)","title":"Fixed"},{"location":"changelog/#040-2022-04-19","text":"","title":"[0.4.0] - 2022-04-19"},{"location":"changelog/#added","text":"Added API.GetVersion which allows external applications to check which version of the plugin is installed Added API.PromptForGradient as a replacement for API.PromptForColorSequence , which can prompt for either Gradients or ColorSequences Added color interpolation controls and ColorSequence code exporting to the Gradient Editor Added the Color Tools section where the Color Info page used to be Added HWB, Lab, Luv, LCh(ab/uv), xyY, and XYZ to Color Info A first-time use prompt will now appear informing the user that script injection is required for exporting palettes to ModuleScripts and the API Added a warning in the export dialog that script injection is required for exporting palettes to ModuleScripts Added a color sorter that uses CIEDE2000 in the Color Tools section Added a Picular palette (idea from csqrl's Picular plugin ) Added a Gradient picker tool which allows users to pick colors from their gradients Color Properties now shows the color type of the each property Right-clicking on a property in Color Properties now shows a menu to view the property documentation Mouse drag inputs now work outside of editor windows","title":"Added"},{"location":"changelog/#changed","text":"API.PromptForColor now allows for prompting either Colors or Color3s Improved keypoint dragging behaviour in the Gradient Editor Improved performance (probably) API.PromptForColor and API.PromptForGradient now reject with PromptErrors instead of message strings Checking for updates now gracefully handles errors Checking for updates no longer does excess work if an update notice has already been shown Changed the message when notifying the user that a new version is available Moved the Color Variations palette to the Color Tools section API injection is now automatically done at startup Releases now contain binary (rbxm) files, so file size is reduced Terrain material color properties were renamed to \"[Material] Material\" (e.g. \"Asphalt Material\") from \"[Material] Color\" (e.g. \"Asphalt Color\")","title":"Changed"},{"location":"changelog/#fixed_1","text":"Exporting palettes now lists color components correctly (components were listed in the order R BG instead of R GB ) Changing palettes now deselects the selected color Changing palettes in the export dialog now correctly persists the export type Scrollbars no longer interfere with mouse drag inputs","title":"Fixed"},{"location":"changelog/#deprecated","text":"API.PromptForColorSequence has been deprecated, please use API.PromptForGradient for new work API.IsColorSequenceEditorOpen has been deprecated, please use API.IsGradientEditorOpen for new work","title":"Deprecated"},{"location":"changelog/#removed","text":"The \" Preview color changes before applying them when using Color Properties \" setting was removed","title":"Removed"},{"location":"changelog/#031-2021-12-09","text":"","title":"[0.3.1] - 2021-12-09"},{"location":"changelog/#fixed_2","text":"Fixed a bug where trying to use the scroll wheel on a dropdown selector (e.g. slider or palette pickers) resulted in a blank page","title":"Fixed"},{"location":"changelog/#030-2021-07-21","text":"","title":"[0.3.0] - 2021-07-21"},{"location":"changelog/#added_1","text":"Added the ability to import palettes from ModuleScripts, StringValues, JSON files, or URLs Added the ability to export palettes as ModuleScripts or StringValues Users will now be notified at startup if their version of ColorPane is out-of-date, with the option to disable this in the Settings Added a palette showing variations of the selected color, including hues, shades, tints, and tones Added a Copic color palette Holding down either Shift key when selecting the option to delete a palette will now bypass the confirmation dialog Users can now use the arrow keys to traverse palettes when a color is selected, as well as switch between keypoints in the ColorSequence editor when one is selected Setting data will now automatically save instead of only when the plugin is unloaded or when the Settings window is closed, with options to disable this or modify the interval in the Settings Users now have the option to cache the Roblox API data so that Color Properties can be used during testing or offline with the \"Cache Roblox API data\" setting Added a gradient palette Added a toolbar button to summon the Gradient Editor Added a setting to toggle previewing color changes before applying them when using Color Properties","title":"Added"},{"location":"changelog/#fixed_3","text":"Fixed a bug that occurred when the API script was modified while the API wasn't loaded Fixed a bug where trying to use the scroll wheel on the palette page picker would break the palettes page if the user didn't have any User Palettes Fixed a bug that occurred if Color Properties tried referencing an object property that existed in the API dump but didn't exist on the object, most likely because the Studio and API dump versions were mismatched Fixed a bug that occurred when a text input was focused and destroyed due to a re-render","title":"Fixed"},{"location":"changelog/#changed_1","text":"Testing sessions (e.g. Play Solo) can no longer modify settings or write data to disk Changed the behaviour for data writing when multiple Studio sessions are open Modified some setting descriptions to more accurately reflect what they actually do Changed the \"Load API\" toolbar button's text and description to more accurately reflect what it actually does Color Properties now shows a notice if the selection has no color properties instead of showing a blank window Several text inputs, mainly for color components, will now select their entire text when you focus on them Palette search will now update as the search text changes and no longer requires the user to release the TextBox's focus Text inputs will now respond to overflow text and changes to the cursor position When adding a new color to a palette, the search query will reset and the new color will be selected Changed the icons for the Color and Gradient Editor toolbar buttons Differentiated the icon denoting a removal from a subtraction Removed the 99 quick palette color limit Settings will now visually indicate to the user if saving is disabled","title":"Changed"},{"location":"changelog/#021-2021-03-29","text":"","title":"[0.2.1] - 2021-03-29"},{"location":"changelog/#fixed_4","text":"The Color Properties window no longer tries to load in testing modes The Color Properties window will now show the loading screen if it is enabled on startup instead of being blank","title":"Fixed"},{"location":"changelog/#020-2021-03-29","text":"","title":"[0.2.0] - 2021-03-29"},{"location":"changelog/#added_2","text":"Added a Settings window Integrated the functionality of ColorProps into ColorPane, with the option to automatically load the window at startup in the Settings You can now view palettes in either a grid or list layout Added a palette of web colors Added sections to the palette list to distinguish between built-in and user-created palettes Added an editor page that lets you copy/paste between different color types","title":"Added"},{"location":"changelog/#changed_2","text":"API loading is no longer occurs at startup by default, the user must now explicitly load it or set the option to automatically load it in the Settings Color Properties: You can now click anywhere inside a property list item to edit the color, not just on the item's color indicator Changed the behaviour of the palette grid double-click shortcut: clicking on the color at any time after it has been selected will set the current color, not just within the amount of time that would be considered a \"double click\" When searching for a palette color, if the selected color is included in the filtered list, it will now stay selected instead of being deselected You will now be asked to input a name before creating new palettes, with the option to disable this in the Settings The palette naming prompt will now show you what the actual new name will be if the inputted name is already being used","title":"Changed"},{"location":"changelog/#fixed_5","text":"The titles of the editor windows now reset to an identifiable name once they are closed Setting the initial prompt value when calling PromptForColor no longer causes OnColorChanged to be called Improved the performance of multiple components, the effects of which will be particularly noticable when resizing editor windows or using the palettes page The editor page bar in the color editor window now correctly highlights the currently-chosen editor page Editor pages in the color editor now have the proper minimum width, previously the calculations did not take padding into account and ended up making them slightly smaller than the minimum Fixed improper behaviour in the color wheel due to some misplaced code: the color value should have updated when the left mouse button was pressed down on the saturation-brightness square, however it occurred when the mouse button was released instead If you close the Color Properties window while editing a property, the color editor window(s) should now close","title":"Fixed"},{"location":"changelog/#removed_1","text":"Removed the undocumented OpenColorEditor function from the API Removed the name restrictions on user-created palettes","title":"Removed"},{"location":"changelog/#012-2021-03-10","text":"","title":"[0.1.2] - 2021-03-10"},{"location":"changelog/#added_3","text":"Added a toolbar button that lets the user attempt to drop the API script into CoreGui if it could not be done automatically Added toolbar button icons Added a warning when modifying the API script's Source","title":"Added"},{"location":"changelog/#changed_3","text":"Updated and fixed some documentation Changed the name of the color editor toolbar button to \"Color Editor\" (from just \"Editor\")","title":"Changed"},{"location":"changelog/#removed_2","text":"Removed the undocumented OpenColorSequenceEditor function from the API ( OpenColorEditor will be removed in future update)","title":"Removed"},{"location":"changelog/#011-2021-03-09","text":"","title":"[0.1.1] - 2021-03-09"},{"location":"changelog/#changed_4","text":"Now gracefully handles script injection","title":"Changed"},{"location":"changelog/#010-2021-03-09","text":"","title":"[0.1.0] - 2021-03-09"},{"location":"changelog/#added_4","text":"ColorPane first release","title":"Added"},{"location":"support/","text":"Contributing \u00b6 Relevant Links \u00b6 GitHub , for opening issues and submitting pull requests DevForum thread , for sending reports BlupoV2's DevForum profile , for sending reports Bug Reports \u00b6 Bugs should be submitted by sending a report or opening an issue. Please include a detailed description and an image and/or video of the bug to make it easier to track down. Documentation \u00b6 If you find any errors or places for improvement in the documentation, feel free to send a report (preferably via private message), open an issue, or submit a pull request ( main or develop is OK). ColorPane uses MkDocs with the Material theme for its documentation. Translations \u00b6 To reach as many developers as possible, one of ColorPane's goals is to be fully translated into several languages. If you would like to help translate ColorPane, you can contribute to the Crowdin project . Feature Requests \u00b6 Features requests should be submitted by sending them (preferable a private message) or opening an issue. Feature requests should align with ColorPane's purpose of being a general-purpose suite of color tools. Please be as detailed as possible, and include images and/or video if necessary. New features should be fully discussed before contributing any code to avoid any wasted time and/or effort. Code Contributions \u00b6 If you have code you would like to contribute to ColorPane, please submit a pull request. ColorPane uses Rojo 7 for project management. Please use place.project.json when working in Studio ( default.project.json is used for building the plugin file). The plugin build folder will be located in ServerStorage. Please only submit new code to the develop branch . Donations \u00b6 ColorPane is and will remain a free-to-use, open-source project. Because of that, donations are greatly appreciated so that development can continue and new features can be added. If you want to support ColorPane by donating, you can use either: Patreon for recurring donations, or Ko-fi for one-time donations","title":"Support ColorPane"},{"location":"support/#contributing","text":"","title":"Contributing"},{"location":"support/#relevant-links","text":"GitHub , for opening issues and submitting pull requests DevForum thread , for sending reports BlupoV2's DevForum profile , for sending reports","title":"Relevant Links"},{"location":"support/#bug-reports","text":"Bugs should be submitted by sending a report or opening an issue. Please include a detailed description and an image and/or video of the bug to make it easier to track down.","title":"Bug Reports"},{"location":"support/#documentation","text":"If you find any errors or places for improvement in the documentation, feel free to send a report (preferably via private message), open an issue, or submit a pull request ( main or develop is OK). ColorPane uses MkDocs with the Material theme for its documentation.","title":"Documentation"},{"location":"support/#translations","text":"To reach as many developers as possible, one of ColorPane's goals is to be fully translated into several languages. If you would like to help translate ColorPane, you can contribute to the Crowdin project .","title":"Translations"},{"location":"support/#feature-requests","text":"Features requests should be submitted by sending them (preferable a private message) or opening an issue. Feature requests should align with ColorPane's purpose of being a general-purpose suite of color tools. Please be as detailed as possible, and include images and/or video if necessary. New features should be fully discussed before contributing any code to avoid any wasted time and/or effort.","title":"Feature Requests"},{"location":"support/#code-contributions","text":"If you have code you would like to contribute to ColorPane, please submit a pull request. ColorPane uses Rojo 7 for project management. Please use place.project.json when working in Studio ( default.project.json is used for building the plugin file). The plugin build folder will be located in ServerStorage. Please only submit new code to the develop branch .","title":"Code Contributions"},{"location":"support/#donations","text":"ColorPane is and will remain a free-to-use, open-source project. Because of that, donations are greatly appreciated so that development can continue and new features can be added. If you want to support ColorPane by donating, you can use either: Patreon for recurring donations, or Ko-fi for one-time donations","title":"Donations"},{"location":"developer-guide/api-integration/","text":"The ColorPane API allows plugin developers to use ColorPane in their projects in place of creating their own pickers. Acquiring the API \u00b6 To use the API, you need to acquire the API script. If the user has the plugin installed (and has allowed script injection), the API script will be a ModuleScript present in CoreGui, named ColorPane . local ColorPane = require ( game : GetService ( \"CoreGui\" ): FindFirstChild ( \"ColorPane\" )) You can also decide to wait for the API, although you should probably notify the user that the API isn't available and give them a button to look again instead. local CoreGui = game : GetService ( \"CoreGui\" ) local ColorPane local locateButton = ... local locateAPI = function () if ( ColorPane ) then return end local apiScript = CoreGui : FindFirstChild ( \"ColorPane\" ) if ( not ( apiScript and apiScript : IsA ( \"ModuleScript\" ))) then warn ( \"The ColorPane API was not found, please make sure you have the plugin installed and try again.\" ) else ColorPane = require ( apiScript ) end end locateButton . Activated : Connect ( function () if ( ColorPane ) then return end locateAPI () end ) Using the API \u00b6 You can view the API reference for more information on the API examples in this page. Getting Colors \u00b6 You can obtain colors with the PromptForColor and PromptForGradient functions. Warning You must use the dot operator ( . ) when calling API functions (e.g. ColorPane.PromptForColor instead of ColorPane:PromptForColor ). The API is not a class-like object. local editPromise = ColorPane . PromptForColor ({ PromptTitle = \"Hello, Roblox!\" , -- start the prompt with a random color InitialColor = Color3 . new ( math.random (), math.random (), math.random ()), OnColorChanged = function ( intermediateColor ) -- some cool stuff end , }) local editPromise = ColorPane . PromptForGradient ({ PromptTitle = \"Hello, Roblox!\" , -- black to white gradient InitialGradient = ColorSequence . new ( Color3 . new ( 0 , 0 , 0 ), Color3 . new ( 1 , 1 , 1 )), OnGradientChanged = function ( intermediateGradient ) -- some cool stuff end , }) The prompt functions return Promises , which are used to encapsulate values that will exist in the future, but do not currently exist. editPromise : andThen ( function ( newColor ) print ( \"Got a new color: \" .. tostring ( newColor )) end , function ( error ) warn ( tostring ( error )) end ): finally ( function () editPromise = nil end ) -- the color is no longer relevant editPromise : cancel () If you're not familiar with the Promise workflow, you can use Promise.await (or Promise.awaitStatus ), which will yield until a value is returned, similar to the various Async functions in the engine. local status , data = editPromise : awaitStatus () if ( status == ColorPane . PromiseStatus . Resolved ) then print ( \"Got a new color: \" .. tostring ( data )) elseif ( status == ColorPane . PromiseStatus . Rejected ) then warn ( tostring ( data )) end editPromise = nil Unloading \u00b6 You should use the Unloading event to clean up anything that uses ColorPane. Any Promises created with the API will automatically be cancelled. ColorPane . Unloading : Connect ( function () ColorPane = nil end ) Advanced Prompts \u00b6 For more refined controls over how colors are handled, you can specify prompt options. For PromptForColor , you can refer to ColorPromptOptions , but the only advanced option is specifying the type of color you receive (either a Color3 or a Color ). For PromptForGradient , refer to GradientPromptOptions . You can specify the details of how the gradient is constructed, and the type of gradient you receive (either a ColorSequence or a Gradient ). ColorPane . PromptForGradient ({ PromptTitle = \"Hello, Roblox!\" , InitialGradient = ColorSequence . new ( Color3 . new ( math.random (), math.random (), math.random ()), Color3 . new ( math.random (), math.random (), math.random ()) ), InitialColorSpace = \"XYZ\" , InitialPrecision = 2 , })","title":"API Integration"},{"location":"developer-guide/api-integration/#acquiring-the-api","text":"To use the API, you need to acquire the API script. If the user has the plugin installed (and has allowed script injection), the API script will be a ModuleScript present in CoreGui, named ColorPane . local ColorPane = require ( game : GetService ( \"CoreGui\" ): FindFirstChild ( \"ColorPane\" )) You can also decide to wait for the API, although you should probably notify the user that the API isn't available and give them a button to look again instead. local CoreGui = game : GetService ( \"CoreGui\" ) local ColorPane local locateButton = ... local locateAPI = function () if ( ColorPane ) then return end local apiScript = CoreGui : FindFirstChild ( \"ColorPane\" ) if ( not ( apiScript and apiScript : IsA ( \"ModuleScript\" ))) then warn ( \"The ColorPane API was not found, please make sure you have the plugin installed and try again.\" ) else ColorPane = require ( apiScript ) end end locateButton . Activated : Connect ( function () if ( ColorPane ) then return end locateAPI () end )","title":"Acquiring the API"},{"location":"developer-guide/api-integration/#using-the-api","text":"You can view the API reference for more information on the API examples in this page.","title":"Using the API"},{"location":"developer-guide/api-integration/#getting-colors","text":"You can obtain colors with the PromptForColor and PromptForGradient functions. Warning You must use the dot operator ( . ) when calling API functions (e.g. ColorPane.PromptForColor instead of ColorPane:PromptForColor ). The API is not a class-like object. local editPromise = ColorPane . PromptForColor ({ PromptTitle = \"Hello, Roblox!\" , -- start the prompt with a random color InitialColor = Color3 . new ( math.random (), math.random (), math.random ()), OnColorChanged = function ( intermediateColor ) -- some cool stuff end , }) local editPromise = ColorPane . PromptForGradient ({ PromptTitle = \"Hello, Roblox!\" , -- black to white gradient InitialGradient = ColorSequence . new ( Color3 . new ( 0 , 0 , 0 ), Color3 . new ( 1 , 1 , 1 )), OnGradientChanged = function ( intermediateGradient ) -- some cool stuff end , }) The prompt functions return Promises , which are used to encapsulate values that will exist in the future, but do not currently exist. editPromise : andThen ( function ( newColor ) print ( \"Got a new color: \" .. tostring ( newColor )) end , function ( error ) warn ( tostring ( error )) end ): finally ( function () editPromise = nil end ) -- the color is no longer relevant editPromise : cancel () If you're not familiar with the Promise workflow, you can use Promise.await (or Promise.awaitStatus ), which will yield until a value is returned, similar to the various Async functions in the engine. local status , data = editPromise : awaitStatus () if ( status == ColorPane . PromiseStatus . Resolved ) then print ( \"Got a new color: \" .. tostring ( data )) elseif ( status == ColorPane . PromiseStatus . Rejected ) then warn ( tostring ( data )) end editPromise = nil","title":"Getting Colors"},{"location":"developer-guide/api-integration/#unloading","text":"You should use the Unloading event to clean up anything that uses ColorPane. Any Promises created with the API will automatically be cancelled. ColorPane . Unloading : Connect ( function () ColorPane = nil end )","title":"Unloading"},{"location":"developer-guide/api-integration/#advanced-prompts","text":"For more refined controls over how colors are handled, you can specify prompt options. For PromptForColor , you can refer to ColorPromptOptions , but the only advanced option is specifying the type of color you receive (either a Color3 or a Color ). For PromptForGradient , refer to GradientPromptOptions . You can specify the details of how the gradient is constructed, and the type of gradient you receive (either a ColorSequence or a Gradient ). ColorPane . PromptForGradient ({ PromptTitle = \"Hello, Roblox!\" , InitialGradient = ColorSequence . new ( Color3 . new ( math.random (), math.random (), math.random ()), Color3 . new ( math.random (), math.random (), math.random ()) ), InitialColorSpace = \"XYZ\" , InitialPrecision = 2 , })","title":"Advanced Prompts"},{"location":"developer-guide/integration-examples/","text":"Some plugins have integrated ColorPane. If you would like your plugin to be listed on this page, send a message to BlupoV2 on the DevForum or open an issue on GitHub . Third-Party Plugins \u00b6 Sweetheartichoke's Tag Editor plugin Example Plugins \u00b6 Coming soon(tm)","title":"Integration Examples"},{"location":"developer-guide/integration-examples/#third-party-plugins","text":"Sweetheartichoke's Tag Editor plugin","title":"Third-Party Plugins"},{"location":"developer-guide/integration-examples/#example-plugins","text":"Coming soon(tm)","title":"Example Plugins"},{"location":"technical/api-reference/","text":"Info The ColorPane API makes use of Promises , and you should review their documentation if necessary. Types \u00b6 ColorPromptOptions \u00b6 { PromptTitle: string?, ColorType: (\"Color3\" | \"Color\")?, InitialColor: (Color | Color3)?, OnColorChanged: ((Color | Color3) -> nil)? } Currently, the type of InitialColor and the value of ColorType must match. This will be changed in a future update. OnColorChanged must not yield. ColorSequencePromptOptions \u00b6 { PromptTitle: string?, InitialColor: ColorSequence?, OnColorChanged: ((ColorSequence) -> nil)? } OnColorChanged must not yield. GradientPromptOptions \u00b6 { PromptTitle: string?, GradientType: (\"ColorSequence\" | \"Gradient\")?, InitialGradient: (Gradient | ColorSequence)?, InitialColorSpace: string?, InitialHueAdjustment: string?, InitialPrecision: number?, OnGradientChanged: ((Gradient | ColorSequence) -> nil)? } Currently, the type of InitialGradient and the value of GradientType must match. This will be changed in a future update. OnGradientChanged must not yield. InitialColorSpace refers to the one of the color spaces used by Color.mix . InitialHueAdjustment refers to the one of the hue adjustments used by Color.mix . InitialPrecision refers to the \"precision\" of the gradient, or how visually-accurate you want it to be. This currently ranges from 0-18, but the maximum precision depends on the number of keypoints in the gradient. Specifically, the maximum precision for k keypoints, with maximum km keypoints (currently 20) is math.floor((km - 1) / (k - 1)) - 1 PromptError \u00b6 { InvalidPromptOptions: \"InvalidPrompt\", PromptAlreadyOpen: \"PromptAlreadyOpen\", ReservationProblem: \"ReservationProblem\" } Properties \u00b6 ColorPane.PromptError \u00b6 ColorPane.PromptError: PromptError If a prompt cannot be opened, a PromptError will be the value passed through the Promise. It has the following items: InvalidPromptOptions , if the options passed to the prompt function are invalid (e.g. trying to pass a Color3 value to the InitialGradient key of GradientPromptOptions). PromptAlreadyOpen , which should be self-explanatory. ReservationProblem , if you either try to prompt for a color and the gradient editor is already open, or you try to prompt for a gradient and the color editor is already open. ColorPane.PromiseStatus \u00b6 ColorPane.PromiseStatus: Status Refers to the Status enum of the Promise library. Functions \u00b6 ColorPane.GetVersion \u00b6 ColorPane.GetVersion(): (number, number, number) Returns the version of ColorPane release, following semantic versioning . This should be used if your applications requires certain versions of ColorPane to function properly. ColorPane.IsColorEditorOpen \u00b6 ColorPane.IsColorEditorOpen(): boolean Returns whether the color editor is open or not. ColorPane.IsGradientEditorOpen \u00b6 ColorPane.IsGradientEditorOpen(): boolean Returns whether the gradient editor is open or not. ColorPane.IsColorSequenceEditorOpen \u00b6 Alias for ColorPane.IsGradientEditorOpen ColorPane.PromptForColor \u00b6 ColorPane.PromptForColor(promptOptions: ColorPromptOptions?): Promise<Color | Color3 | PromptError> Prompts the user for a color. Returns a Promise that will resolve with either a Color or Color3 , or immediately reject if either the color editor or gradient editor prompts are already open. If the user closes the prompt without submitting a color, the Promise will be cancelled. ColorPane.PromptForGradient \u00b6 ColorPane.PromptForGradient(promptOptions: GradientPromptOptions?): Promise<Gradient | ColorSequence | PromptError> Prompts the user for a gradient. Returns a Promise that will resolve with either a Gradient or ColorSequence , or immediately reject if the prompt is already open. If the user closes the prompt without submitting a gradient, the Promise will be cancelled. ColorPane.PromptForColorSequence \u00b6 ColorPane.PromptForColorSequence(promptOptions: ColorSequencePromptOptions?): Promise<ColorSequence | PromptError> Legacy alternative for ColorPane.PromptForGradient . Equivalent to: ColorPane . PromptForGradient ({ PromptTitle = promptOptions . PromptTitle , GradientType = \"ColorSequence\" , InitialGradient = promptOptions . InitialColor , OnGradientChanged = promptOptions . OnColorChanged , }) Events \u00b6 ColorPane.Unloading \u00b6 ColorPane.Unloading: Signal Fires when the API is unloading. You should use this event to clean up any scripts that use ColorPane.","title":"API Reference"},{"location":"technical/api-reference/#types","text":"","title":"Types"},{"location":"technical/api-reference/#colorpromptoptions","text":"{ PromptTitle: string?, ColorType: (\"Color3\" | \"Color\")?, InitialColor: (Color | Color3)?, OnColorChanged: ((Color | Color3) -> nil)? } Currently, the type of InitialColor and the value of ColorType must match. This will be changed in a future update. OnColorChanged must not yield.","title":"ColorPromptOptions"},{"location":"technical/api-reference/#colorsequencepromptoptions","text":"{ PromptTitle: string?, InitialColor: ColorSequence?, OnColorChanged: ((ColorSequence) -> nil)? } OnColorChanged must not yield.","title":"ColorSequencePromptOptions"},{"location":"technical/api-reference/#gradientpromptoptions","text":"{ PromptTitle: string?, GradientType: (\"ColorSequence\" | \"Gradient\")?, InitialGradient: (Gradient | ColorSequence)?, InitialColorSpace: string?, InitialHueAdjustment: string?, InitialPrecision: number?, OnGradientChanged: ((Gradient | ColorSequence) -> nil)? } Currently, the type of InitialGradient and the value of GradientType must match. This will be changed in a future update. OnGradientChanged must not yield. InitialColorSpace refers to the one of the color spaces used by Color.mix . InitialHueAdjustment refers to the one of the hue adjustments used by Color.mix . InitialPrecision refers to the \"precision\" of the gradient, or how visually-accurate you want it to be. This currently ranges from 0-18, but the maximum precision depends on the number of keypoints in the gradient. Specifically, the maximum precision for k keypoints, with maximum km keypoints (currently 20) is math.floor((km - 1) / (k - 1)) - 1","title":"GradientPromptOptions"},{"location":"technical/api-reference/#prompterror","text":"{ InvalidPromptOptions: \"InvalidPrompt\", PromptAlreadyOpen: \"PromptAlreadyOpen\", ReservationProblem: \"ReservationProblem\" }","title":"PromptError"},{"location":"technical/api-reference/#properties","text":"","title":"Properties"},{"location":"technical/api-reference/#colorpaneprompterror","text":"ColorPane.PromptError: PromptError If a prompt cannot be opened, a PromptError will be the value passed through the Promise. It has the following items: InvalidPromptOptions , if the options passed to the prompt function are invalid (e.g. trying to pass a Color3 value to the InitialGradient key of GradientPromptOptions). PromptAlreadyOpen , which should be self-explanatory. ReservationProblem , if you either try to prompt for a color and the gradient editor is already open, or you try to prompt for a gradient and the color editor is already open.","title":"ColorPane.PromptError"},{"location":"technical/api-reference/#colorpanepromisestatus","text":"ColorPane.PromiseStatus: Status Refers to the Status enum of the Promise library.","title":"ColorPane.PromiseStatus"},{"location":"technical/api-reference/#functions","text":"","title":"Functions"},{"location":"technical/api-reference/#colorpanegetversion","text":"ColorPane.GetVersion(): (number, number, number) Returns the version of ColorPane release, following semantic versioning . This should be used if your applications requires certain versions of ColorPane to function properly.","title":"ColorPane.GetVersion"},{"location":"technical/api-reference/#colorpaneiscoloreditoropen","text":"ColorPane.IsColorEditorOpen(): boolean Returns whether the color editor is open or not.","title":"ColorPane.IsColorEditorOpen"},{"location":"technical/api-reference/#colorpaneisgradienteditoropen","text":"ColorPane.IsGradientEditorOpen(): boolean Returns whether the gradient editor is open or not.","title":"ColorPane.IsGradientEditorOpen"},{"location":"technical/api-reference/#colorpaneiscolorsequenceeditoropen","text":"Alias for ColorPane.IsGradientEditorOpen","title":"ColorPane.IsColorSequenceEditorOpen"},{"location":"technical/api-reference/#colorpanepromptforcolor","text":"ColorPane.PromptForColor(promptOptions: ColorPromptOptions?): Promise<Color | Color3 | PromptError> Prompts the user for a color. Returns a Promise that will resolve with either a Color or Color3 , or immediately reject if either the color editor or gradient editor prompts are already open. If the user closes the prompt without submitting a color, the Promise will be cancelled.","title":"ColorPane.PromptForColor"},{"location":"technical/api-reference/#colorpanepromptforgradient","text":"ColorPane.PromptForGradient(promptOptions: GradientPromptOptions?): Promise<Gradient | ColorSequence | PromptError> Prompts the user for a gradient. Returns a Promise that will resolve with either a Gradient or ColorSequence , or immediately reject if the prompt is already open. If the user closes the prompt without submitting a gradient, the Promise will be cancelled.","title":"ColorPane.PromptForGradient"},{"location":"technical/api-reference/#colorpanepromptforcolorsequence","text":"ColorPane.PromptForColorSequence(promptOptions: ColorSequencePromptOptions?): Promise<ColorSequence | PromptError> Legacy alternative for ColorPane.PromptForGradient . Equivalent to: ColorPane . PromptForGradient ({ PromptTitle = promptOptions . PromptTitle , GradientType = \"ColorSequence\" , InitialGradient = promptOptions . InitialColor , OnGradientChanged = promptOptions . OnColorChanged , })","title":"ColorPane.PromptForColorSequence"},{"location":"technical/api-reference/#events","text":"","title":"Events"},{"location":"technical/api-reference/#colorpaneunloading","text":"ColorPane.Unloading: Signal Fires when the API is unloading. You should use this event to clean up any scripts that use ColorPane.","title":"ColorPane.Unloading"},{"location":"technical/palette-format/","text":"When importing palettes, they must follow this JSON format: { \"name\" : \"Palette Name\" , \"colors\" : [ { \"name\" : \"Color Name\" , \"color\" : [ 0 , 0 , 0 ] }, { \"name\" : \"Another Color Name\" , \"color\" : [ 0.5 , 0.5 , 0.5 ] }, { \"name\" : \"Yet Another Color Name\" , \"color\" : [ 1 , 1 , 1 ] } ] } The color array of each color object is a 3-element array representing the RGB channels, which range from [0, 1]. No two colors can share the same name, however any number of colors have have the same color array. If importing from a ModuleScript, the palette can also be a Lua table representation of the above format, i.e. { name = \"Palette Name\" , colors = { { name = \"Color Name\" , color = { 0 , 0 , 0 } }, { name = \"Another Color Name\" , color = { 0.5 , 0.5 , 0.5 } }, { name = \"Yet Another Color Name\" , color = { 1 , 1 , 1 } } } }","title":"Palette Format"},{"location":"user-guide/color-editor/","text":"Color Wheel \u00b6 The buttons below the wheel let you select color harmonies , which will be marked on the wheel using squares, while the main color marker will be a circle. Sliders \u00b6 The editor includes several sliders: RGB CMYK HSB/L Monochrome Temperature Palettes \u00b6 Palettes let you store lists of colors. For most palettes, you will see (from top to bottom, left to right): a search bar, buttons to switch between grid or list layout, a button to add the current color to the palette, and the list of colors. There are several built-in palettes, some of which have custom layouts: BrickColors ColorBrewer Copic Picular Web Colors The overflow menu (the button) has several options such as creating new palettes, deleting existing palettes, and importing palettes. Layouts \u00b6 The grid layout (pictured above) is the default layout, and allows for quick access to colors. Clicking on a color will select it, which then allows you to set the current color, remove the color, change its position in the palette, or rename it. The list layout (pictured below) is useful for palettes where color names are important. In this layout, clicking on a color (meaning the box that shows the color) will set the current color, and clicking anywhere else inside the cell will select it. Import and Export \u00b6 Palettes can be imported and exported, for uses such as sharing them with collaborators or backing them up. You can access the import/export options from the overflow menu (the Export option does not appear for built-in palettes). There are various ways to import palettes, but the UI will look similar for each method. After you extract the palette from the method you choose and it's in the correct format , the Import button will be enabled. You can also change the name of the palette before you import it, and the name input will be pre-filled with the name from the palette file/object. Attention When importing via URL, you may be prompted by Studio to allow HTTP requests to the domain of your URL. Palettes can be exported as ModuleScripts or StringValues to ServerStorage, and the exported object will contain the JSON string for the palette (as well as some metadata for ModuleScripts). Info Palettes cannot be exported to JSON files, as the Roblox API does not have any functions for this. If you need a JSON file, you can copy the content of the JSON string into a file. For StringValue exports, you can copy the Value property. For ModuleScripts, copy the text inside the double-square-brackets ( [[...]] ). ColorBrewer Palette \u00b6 ColorBrewer is a collection of color sets used in cartography. You can select the data type and number of classes, and the palette will display the various color sets that match the criteria. Picular Palette \u00b6 Picular is an online tool that lets you search \"the color of anything\". You can use the search bar to search for things you want the color of, e.g. \"roblox\". There is also a search history tab where you can view previous entries you have looked up. Color Tools \u00b6 Various color tools are included, such as a color information tool, and a gradient picker. Color Info \u00b6 The information tool shows the current color in different representations. You can copy text to paste somewhere else, and paste into the text boxes to change the current color (assuming what you paste follows the same format). Color Sorter \u00b6 The sorter tool allows you to check how similar a list of colors is to a particular color, where the colors are listed from most to least similar after pressing Sort . The sorter uses CIEDE2000 . Color Variations \u00b6 The variations tools shows various tints, tones, shades, and hue rotations of the current color, with an adjuster to change how many colors are shown. Gradient Pickers \u00b6 The gradient pickers allow you to select a color from the different gradients in your gradient palette. Clicking anywhere on a gradient will set the current color to the color at that position. You can also click and drag to select colors as if it were a slider. Others \u00b6 The two colors in a large square at the bottom-left of the editor represent the current (top) and initial (bottom) colors. You can click on the initial color if you want to reset the current color. The hex input below it accepts either 3 ( ABC = AABBCC ) or 6 ( ABCDEF ) digits. The quick palette to the right of the large square lets you temporarily store colors for quick access. You can add as many colors as you like, but you can't remove any colors. The number of colors that the quick palette displays depends on the size of the window (i.e. a larger window displays more colors).","title":"Color Editor"},{"location":"user-guide/color-editor/#color-wheel","text":"The buttons below the wheel let you select color harmonies , which will be marked on the wheel using squares, while the main color marker will be a circle.","title":"Color Wheel"},{"location":"user-guide/color-editor/#sliders","text":"The editor includes several sliders: RGB CMYK HSB/L Monochrome Temperature","title":"Sliders"},{"location":"user-guide/color-editor/#palettes","text":"Palettes let you store lists of colors. For most palettes, you will see (from top to bottom, left to right): a search bar, buttons to switch between grid or list layout, a button to add the current color to the palette, and the list of colors. There are several built-in palettes, some of which have custom layouts: BrickColors ColorBrewer Copic Picular Web Colors The overflow menu (the button) has several options such as creating new palettes, deleting existing palettes, and importing palettes.","title":"Palettes"},{"location":"user-guide/color-editor/#layouts","text":"The grid layout (pictured above) is the default layout, and allows for quick access to colors. Clicking on a color will select it, which then allows you to set the current color, remove the color, change its position in the palette, or rename it. The list layout (pictured below) is useful for palettes where color names are important. In this layout, clicking on a color (meaning the box that shows the color) will set the current color, and clicking anywhere else inside the cell will select it.","title":"Layouts"},{"location":"user-guide/color-editor/#import-and-export","text":"Palettes can be imported and exported, for uses such as sharing them with collaborators or backing them up. You can access the import/export options from the overflow menu (the Export option does not appear for built-in palettes). There are various ways to import palettes, but the UI will look similar for each method. After you extract the palette from the method you choose and it's in the correct format , the Import button will be enabled. You can also change the name of the palette before you import it, and the name input will be pre-filled with the name from the palette file/object. Attention When importing via URL, you may be prompted by Studio to allow HTTP requests to the domain of your URL. Palettes can be exported as ModuleScripts or StringValues to ServerStorage, and the exported object will contain the JSON string for the palette (as well as some metadata for ModuleScripts). Info Palettes cannot be exported to JSON files, as the Roblox API does not have any functions for this. If you need a JSON file, you can copy the content of the JSON string into a file. For StringValue exports, you can copy the Value property. For ModuleScripts, copy the text inside the double-square-brackets ( [[...]] ).","title":"Import and Export"},{"location":"user-guide/color-editor/#colorbrewer-palette","text":"ColorBrewer is a collection of color sets used in cartography. You can select the data type and number of classes, and the palette will display the various color sets that match the criteria.","title":"ColorBrewer Palette"},{"location":"user-guide/color-editor/#picular-palette","text":"Picular is an online tool that lets you search \"the color of anything\". You can use the search bar to search for things you want the color of, e.g. \"roblox\". There is also a search history tab where you can view previous entries you have looked up.","title":"Picular Palette"},{"location":"user-guide/color-editor/#color-tools","text":"Various color tools are included, such as a color information tool, and a gradient picker.","title":"Color Tools"},{"location":"user-guide/color-editor/#color-info","text":"The information tool shows the current color in different representations. You can copy text to paste somewhere else, and paste into the text boxes to change the current color (assuming what you paste follows the same format).","title":"Color Info"},{"location":"user-guide/color-editor/#color-sorter","text":"The sorter tool allows you to check how similar a list of colors is to a particular color, where the colors are listed from most to least similar after pressing Sort . The sorter uses CIEDE2000 .","title":"Color Sorter"},{"location":"user-guide/color-editor/#color-variations","text":"The variations tools shows various tints, tones, shades, and hue rotations of the current color, with an adjuster to change how many colors are shown.","title":"Color Variations"},{"location":"user-guide/color-editor/#gradient-pickers","text":"The gradient pickers allow you to select a color from the different gradients in your gradient palette. Clicking anywhere on a gradient will set the current color to the color at that position. You can also click and drag to select colors as if it were a slider.","title":"Gradient Pickers"},{"location":"user-guide/color-editor/#others","text":"The two colors in a large square at the bottom-left of the editor represent the current (top) and initial (bottom) colors. You can click on the initial color if you want to reset the current color. The hex input below it accepts either 3 ( ABC = AABBCC ) or 6 ( ABCDEF ) digits. The quick palette to the right of the large square lets you temporarily store colors for quick access. You can add as many colors as you like, but you can't remove any colors. The number of colors that the quick palette displays depends on the size of the window (i.e. a larger window displays more colors).","title":"Others"},{"location":"user-guide/color-properties/","text":"The Color Properties window allows you to edit the color properties of objects in your projects. Each property will have a little icon next to its color button to indicate the type of property it is ( for BrickColors, for Color3s, and for ColorSequences). When multiple properties with the same name are listed, their class names will also be listed. Clicking on the color button will allow you to edit the property's value. The Terrain material properties you will see when you select a Terrain object (e.g. \"Asphalt Material\", \"Basalt Material\", etc.) are not real properties. You can still use these fake properties to modify material colors, however. (These fake properties were created because the actual property that they belong to, Terrain.MaterialColors is not accessible to scripts.) Activation \u00b6 Color Properties will require manual activation the first time you use it. You will see a prompt when you open the window telling you that the API data has not been loaded (pictured below). On this screen you can load the API data and change the settings for automatic activation and caching (see the next section). Attention API data is retrieved via HTTP requests to setup.rbxcdn.com . You will be prompted by Studio to allow HTTP requests to this domain the first time you use Color Properties. If you deny this permission, you will not be able to use Color Properties. Info The Roblox API data necessary for Color Properties and the ColorPane API are not related, and you do not need to inject the ColorPane API to use Color Properties. Usage During Testing \u00b6 Since HTTP requests are not allowed from plugins during testing, trying to use Color Properties won't work. You can enable the Cache Roblox API data setting to get around this, which will store the Roblox API data on your computer so that it can be used instead of having to make an HTTP request. Enabling this option may cause noticable pauses whenever the cache needs to be updated, since the size of the API data is quite large.","title":"Color Properties"},{"location":"user-guide/color-properties/#activation","text":"Color Properties will require manual activation the first time you use it. You will see a prompt when you open the window telling you that the API data has not been loaded (pictured below). On this screen you can load the API data and change the settings for automatic activation and caching (see the next section). Attention API data is retrieved via HTTP requests to setup.rbxcdn.com . You will be prompted by Studio to allow HTTP requests to this domain the first time you use Color Properties. If you deny this permission, you will not be able to use Color Properties. Info The Roblox API data necessary for Color Properties and the ColorPane API are not related, and you do not need to inject the ColorPane API to use Color Properties.","title":"Activation"},{"location":"user-guide/color-properties/#usage-during-testing","text":"Since HTTP requests are not allowed from plugins during testing, trying to use Color Properties won't work. You can enable the Cache Roblox API data setting to get around this, which will store the Roblox API data on your computer so that it can be used instead of having to make an HTTP request. Enabling this option may cause noticable pauses whenever the cache needs to be updated, since the size of the API data is quite large.","title":"Usage During Testing"},{"location":"user-guide/gradient-editor/","text":"Editing Keypoints \u00b6 Keypoints can be added by clicking anywhere in the gradient view (as long as the cursor isn't snapped to another keypoint). Clicking on a keypoint will select it, which allows you to delete it, change its color or position, and use the left or right buttons ( not the arrow keys) to swap its color with the keypoint on the left or right, respectively. You can also change the position by dragging it around the gradient view. Other Controls \u00b6 The button reverses the order of the colors in the gradient The Snap input can be used to modify the interval at which keypoints snap The Reset button resets the gradient to its initial value The button toggles showing the ColorSequence code for the gradient, if you wish to copy it. You'll probably have to increase the size of the window to view the whole code. Gradient Palette \u00b6 You can open the gradient palette using the button. Similar to color palettes , you can store gradients for later use. Unlike the color palettes, however, there is only one palette, and you cannot import/export the palette. The first 3 gradients in the palette are built-in, so you cannot modify or delete them. Gradient Info \u00b6 You can access gradient info with the button. Editing gradient information is an advanced feature that allows you to create gradients with interpolation in different color spaces. The available options for the color space and hue interpolation are the same as those used in Color.mix . Increasing precision allows you to get a more visually-accurate gradient for the specified color space, but at the cost of the number of keypoints that you're allowed to insert. For non-RGB color spaces, the precision should be at least 1, otherwise the gradient will not look any different from itself in RGB space. For RGB space, the precision should always be 0, since ColorSequences already use RGB interpolation.","title":"Gradient Editor"},{"location":"user-guide/gradient-editor/#editing-keypoints","text":"Keypoints can be added by clicking anywhere in the gradient view (as long as the cursor isn't snapped to another keypoint). Clicking on a keypoint will select it, which allows you to delete it, change its color or position, and use the left or right buttons ( not the arrow keys) to swap its color with the keypoint on the left or right, respectively. You can also change the position by dragging it around the gradient view.","title":"Editing Keypoints"},{"location":"user-guide/gradient-editor/#other-controls","text":"The button reverses the order of the colors in the gradient The Snap input can be used to modify the interval at which keypoints snap The Reset button resets the gradient to its initial value The button toggles showing the ColorSequence code for the gradient, if you wish to copy it. You'll probably have to increase the size of the window to view the whole code.","title":"Other Controls"},{"location":"user-guide/gradient-editor/#gradient-palette","text":"You can open the gradient palette using the button. Similar to color palettes , you can store gradients for later use. Unlike the color palettes, however, there is only one palette, and you cannot import/export the palette. The first 3 gradients in the palette are built-in, so you cannot modify or delete them.","title":"Gradient Palette"},{"location":"user-guide/gradient-editor/#gradient-info","text":"You can access gradient info with the button. Editing gradient information is an advanced feature that allows you to create gradients with interpolation in different color spaces. The available options for the color space and hue interpolation are the same as those used in Color.mix . Increasing precision allows you to get a more visually-accurate gradient for the specified color space, but at the cost of the number of keypoints that you're allowed to insert. For non-RGB color spaces, the precision should be at least 1, otherwise the gradient will not look any different from itself in RGB space. For RGB space, the precision should always be 0, since ColorSequences already use RGB interpolation.","title":"Gradient Info"},{"location":"user-guide/tips/","text":"Color Editor \u00b6 Page Pickers \u00b6 On the Slider and Palette sections, you can use the scroll wheel on the dropdown button to quickly switch between pages. Palettes \u00b6 If you have a color selected, you can use the arrow keys to select a different color, and you can hold down the key to select faster. You can skip the confirmation screen to delete a palette if you hold down the Shift key before you use the delete option. If you prefer to name palettes after you create them, there is an option in the Settings that lets you create palettes without naming them. They will have the default name New Palette . Gradient Editor \u00b6 If you have a keypoint selected, you can use the left and right arrow keys to select a different keypoint. You can right-click on a keypoint to delete it instead of having to use the delete button. Resetting Session Locks \u00b6 ColorPane uses session locks to prevent multiple sessions trying to write settings at the same time. If ColorPane errors or for some reason cannot clear the session lock, you will receive a message to close other sessions even though you don't have any other sessions open. To fix this, simply use the Claim Session Lock button in the Settings.","title":"Tips and Tricks"},{"location":"user-guide/tips/#color-editor","text":"","title":"Color Editor"},{"location":"user-guide/tips/#page-pickers","text":"On the Slider and Palette sections, you can use the scroll wheel on the dropdown button to quickly switch between pages.","title":"Page Pickers"},{"location":"user-guide/tips/#palettes","text":"If you have a color selected, you can use the arrow keys to select a different color, and you can hold down the key to select faster. You can skip the confirmation screen to delete a palette if you hold down the Shift key before you use the delete option. If you prefer to name palettes after you create them, there is an option in the Settings that lets you create palettes without naming them. They will have the default name New Palette .","title":"Palettes"},{"location":"user-guide/tips/#gradient-editor","text":"If you have a keypoint selected, you can use the left and right arrow keys to select a different keypoint. You can right-click on a keypoint to delete it instead of having to use the delete button.","title":"Gradient Editor"},{"location":"user-guide/tips/#resetting-session-locks","text":"ColorPane uses session locks to prevent multiple sessions trying to write settings at the same time. If ColorPane errors or for some reason cannot clear the session lock, you will receive a message to close other sessions even though you don't have any other sessions open. To fix this, simply use the Claim Session Lock button in the Settings.","title":"Resetting Session Locks"}]}