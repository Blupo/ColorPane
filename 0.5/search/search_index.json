{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ColorPane","text":"<p>ColorPane is a suite of color tools for Roblox Studio plugins. Some of the tools included are:</p> <ul> <li>A color editor with a color wheel, several types of sliders, and various color palettes, with the ability to create, import, and export your own palettes.</li> <li>A gradient editor, similar to the Studio editor, with some quality-of-life changes including keypoint snapping, buttons to swap keypoint colors around, and a gradient palette.</li> </ul> <p> </p>"},{"location":"#installing","title":"Installing","text":"<p>ColorPane comes in 2 parts. Install the one that applies to your situation.</p>"},{"location":"#library","title":"Library","text":"<p>If you want to use these color tools in your own plugin, you'll want to install the ColorPane library:</p> <p> </p> <p>If you use Rojo, you can add the source repository as a submodule. Take a look at the Integration page to learn how to put these tools in your plugin.</p>"},{"location":"#companion","title":"Companion","text":"<p>If you're looking to try out ColorPane to see if it's right for you, or you use a plugin with ColorPane and want to unlock its full capabilities, you'll want to install the Companion plugin.</p> <p> </p> <p>These additional capablities include:</p> <ul> <li>Creating and editing palettes</li> <li>Modifying settings</li> <li>Editing color properties</li> </ul> <p>Take a look at the User Guide to learn how to use the color tools.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Found a bug? Want to request a new feature? Interested in translating ColorPane? Read the Contributing page for guidelines on contributing to the project!</p>"},{"location":"attribution/","title":"Attribution","text":"<p>This page gives attribution to the various open-source projects used in ColorPane, as well as whatever else seems appropriate.</p>"},{"location":"attribution/#colorbrewer","title":"ColorBrewer","text":"<p>This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).</p> <pre><code>Apache-Style Software License for ColorBrewer software and ColorBrewer Color\nSchemes\n\nCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The Pennsylvania State\nUniversity.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not\nuse this file except in compliance with the License. You may obtain a copy of\nthe License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\nLicense for the specific language governing permissions and limitations under\nthe License.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions as source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. The end-user documentation included with the redistribution, if any, must\ninclude the following acknowledgment: \"This product includes color\nspecifications and designs developed by Cynthia Brewer\n(http://colorbrewer.org/).\" Alternately, this acknowledgment may appear in the\nsoftware itself, if and wherever such third-party acknowledgments normally\nappear.\n\n4. The name \"ColorBrewer\" must not be used to endorse or promote products\nderived from this software without prior written permission. For written\npermission, please contact Cynthia Brewer at cbrewer@psu.edu.\n\n5. Products derived from this software may not be called \"ColorBrewer\", nor\nmay \"ColorBrewer\" appear in their name, without prior written permission of\nCynthia Brewer.\n</code></pre>"},{"location":"attribution/#color-temperature","title":"color-temperature","text":"<p>The implementation of the Kelvin color module is based on Neil Bartlett's color-temperature, which is licensed under the MIT License.</p>"},{"location":"attribution/#markdown-buttons","title":"Markdown Buttons","text":"<p>@cxmeel's Material Buttons are cool and you should know about them.</p>"},{"location":"attribution/#material-icons","title":"Material Icons","text":"<p>Google's Material Icons are licensed under the Apache License 2.0.</p>"},{"location":"attribution/#roact-rodux-roact-rodux","title":"roact, rodux, roact-rodux","text":"<p>@roblox's roact, rodux, and roact-rodux are licensed under the Apache License 2.0.</p>"},{"location":"attribution/#roblox-lua-promise","title":"roblox-lua-promise","text":"<p>@evaera's roblox-lua-promise is licensed under the MIT License.</p>"},{"location":"attribution/#t","title":"t","text":"<p>@osyrisrblx's t is licensed under the MIT License.</p>"},{"location":"attribution/#translations","title":"Translations","text":"<ul> <li>French (<code>fr</code>) translation:<ul> <li>Clem Gaming (clmntfeugere)</li> <li>CROISSANT0011</li> </ul> </li> <li>Korean (<code>ko</code>) translation:<ul> <li>CoouDo</li> </ul> </li> <li>Russian (<code>ru</code>) translation:<ul> <li>Artemiy Zaitsev (ztsff)</li> </ul> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added partial translations for French (<code>fr</code>) and Korean (<code>ko</code>)</li> <li>Color editor: Added a dedicated \"Set Color\" button for colors in the palette list layout</li> <li>Color editor: Added a random color button</li> <li>Gradient editor: Added a \"Reset\" button for gradient precision</li> <li>API: Added <code>API.IsColorPromptAvailable</code> to check if calling <code>API.PromptForColor</code> will succeed or immediately reject (replaces <code>API.IsColorEditorOpen</code>)</li> <li>API: Added <code>API.IsGradientPromptAvailable</code> to check if calling <code>API.PromptForGradient</code> will succeed or immediately reject (replaces <code>API.IsGradientEditorOpen</code>)</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Settings: Invalid palettes will no longer cause the entire list of palettes to be removed, just the invalid palettes</li> <li>Color editor: Duplicating palettes with the same name will now create or increment a counter instead of naming it \"Palette (1) (1) (1) ...\"</li> <li>Color Properties: Changing color properties now uses the Recording API</li> <li>API: Promises from the API no longer cancel if the user closes the prompt, they will now instead reject with <code>PromptError.PromptCancelled</code></li> <li>API: For <code>GradientPromptOptions</code>, the type of <code>InitialGradient</code> and the value of <code>GradientType</code> are no longer required to match</li> <li>API: For <code>ColorPromptOptions</code>, the type of <code>InitialColor</code> and the value of <code>ColorType</code> are no longer required to match</li> <li>API: The <code>API.PromptError</code> enum has been re-named to <code>API.PromptRejection</code></li> <li>API: The <code>API.PromptForColor</code> Promise now rejects with <code>SameAsInitial</code> instead of <code>PromptCancelled</code> if the initial and new colors are the same</li> <li>API: The <code>API.PromptForGradient</code> Promise now rejects with <code>SameAsInitial</code> instead of <code>PromptCancelled</code> if the initial and new gradients are the same</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>API: <code>API.PromptForColorSequence</code> (deprecated) now returns a Promise as expected</li> <li>API: Promises returned by <code>API.PromptForColor</code> will no longer reject when the inital and new colors are the same even though you didn't specify an initial color</li> <li>API: Promises returned by <code>API.PromptForGradient</code> will no longer reject when the initial and new gradients are the same even though you didn't specify an initial gradient</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>API: <code>API.IsColorEditorOpen</code> is now deprecated, please use <code>API.IsColorPromptAvailable</code> for new work</li> <li>API: <code>API.IsGradientEditorOpen</code> is now deprecated, please use <code>API.IsGradientPromptAvailable</code> for new work</li> <li>API: <code>API.PromptError</code> is now deprecated, please use <code>API.PromptRejection</code> for new work</li> <li>API: <code>API.Unloading</code> is now deprecated, you should use your plugin's Unloading event instead</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Color editor: Removed the Copic color palette</li> <li>API: The color tools of ColorPane have been spun off into their own library, and the old method of using ColorPane will no longer work. You will need to add the library to your project to continue using them.</li> </ul>"},{"location":"changelog/#041-2022-09-30","title":"[0.4.1] - 2022-09-30","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed a bug where the HSL saturation and lightness sliders would only show a red hue (this is purely a visual bug and did not affect color selection)</li> </ul>"},{"location":"changelog/#040-2022-04-19","title":"[0.4.0] - 2022-04-19","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added <code>API.GetVersion</code> which allows external applications to check which version of the plugin is installed</li> <li>Added <code>API.PromptForGradient</code> as a replacement for <code>API.PromptForColorSequence</code>, which can prompt for either Gradients or ColorSequences</li> <li>Added color interpolation controls and ColorSequence code exporting to the Gradient Editor</li> <li>Added the Color Tools section where the Color Info page used to be</li> <li>Added HWB, Lab, Luv, LCh(ab/uv), xyY, and XYZ to Color Info</li> <li>A first-time use prompt will now appear informing the user that script injection is required for exporting palettes to ModuleScripts and the API</li> <li>Added a warning in the export dialog that script injection is required for exporting palettes to ModuleScripts</li> <li>Added a color sorter that uses CIEDE2000 in the Color Tools section</li> <li>Added a Picular palette (idea from csqrl's Picular plugin)</li> <li>Added a Gradient picker tool which allows users to pick colors from their gradients</li> <li>Color Properties now shows the color type of the each property</li> <li>Right-clicking on a property in Color Properties now shows a menu to view the property documentation</li> <li>Mouse drag inputs now work outside of editor windows</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li><code>API.PromptForColor</code> now allows for prompting either Colors or Color3s</li> <li>Improved keypoint dragging behaviour in the Gradient Editor</li> <li>Improved performance (probably)</li> <li><code>API.PromptForColor</code> and <code>API.PromptForGradient</code> now reject with PromptErrors instead of message strings</li> <li>Checking for updates now gracefully handles errors</li> <li>Checking for updates no longer does excess work if an update notice has already been shown</li> <li>Changed the message when notifying the user that a new version is available</li> <li>Moved the Color Variations palette to the Color Tools section</li> <li>API injection is now automatically done at startup</li> <li>Releases now contain binary (rbxm) files, so file size is reduced</li> <li>Terrain material color properties were renamed to \"[Material] Material\" (e.g. \"Asphalt Material\") from \"[Material] Color\" (e.g. \"Asphalt Color\")</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Exporting palettes now lists color components correctly (components were listed in the order RBG instead of RGB)</li> <li>Changing palettes now deselects the selected color</li> <li>Changing palettes in the export dialog now correctly persists the export type</li> <li>Scrollbars no longer interfere with mouse drag inputs</li> </ul>"},{"location":"changelog/#deprecated_1","title":"Deprecated","text":"<ul> <li><code>API.PromptForColorSequence</code> has been deprecated, please use <code>API.PromptForGradient</code> for new work</li> <li><code>API.IsColorSequenceEditorOpen</code> has been deprecated, please use <code>API.IsGradientEditorOpen</code> for new work</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>The \"Preview color changes before applying them when using Color Properties\" setting was removed</li> </ul>"},{"location":"changelog/#031-2021-12-09","title":"[0.3.1] - 2021-12-09","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed a bug where trying to use the scroll wheel on a dropdown selector (e.g. slider or palette pickers) resulted in a blank page</li> </ul>"},{"location":"changelog/#030-2021-07-21","title":"[0.3.0] - 2021-07-21","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added the ability to import palettes from ModuleScripts, StringValues, JSON files, or URLs</li> <li>Added the ability to export palettes as ModuleScripts or StringValues</li> <li>Users will now be notified at startup if their version of ColorPane is out-of-date, with the option to disable this in the Settings</li> <li>Added a palette showing variations of the selected color, including hues, shades, tints, and tones</li> <li>Added a Copic color palette</li> <li>Holding down either Shift key when selecting the option to delete a palette will now bypass the confirmation dialog</li> <li>Users can now use the arrow keys to traverse palettes when a color is selected, as well as switch between keypoints in the ColorSequence editor when one is selected</li> <li>Setting data will now automatically save instead of only when the plugin is unloaded or when the Settings window is closed, with options to disable this or modify the interval in the Settings</li> <li>Users now have the option to cache the Roblox API data so that Color Properties can be used during testing or offline with the \"Cache Roblox API data\" setting</li> <li>Added a gradient palette</li> <li>Added a toolbar button to summon the Gradient Editor</li> <li>Added a setting to toggle previewing color changes before applying them when using Color Properties</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fixed a bug that occurred when the API script was modified while the API wasn't loaded</li> <li>Fixed a bug where trying to use the scroll wheel on the palette page picker would break the palettes page if the user didn't have any User Palettes</li> <li>Fixed a bug that occurred if Color Properties tried referencing an object property that existed in the API dump but didn't exist on the object, most likely because the Studio and API dump versions were mismatched</li> <li>Fixed a bug that occurred when a text input was focused and destroyed due to a re-render</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Testing sessions (e.g. Play Solo) can no longer modify settings or write data to disk</li> <li>Changed the behaviour for data writing when multiple Studio sessions are open</li> <li>Modified some setting descriptions to more accurately reflect what they actually do</li> <li>Changed the \"Load API\" toolbar button's text and description to more accurately reflect what it actually does</li> <li>Color Properties now shows a notice if the selection has no color properties instead of showing a blank window</li> <li>Several text inputs, mainly for color components, will now select their entire text when you focus on them</li> <li>Palette search will now update as the search text changes and no longer requires the user to release the TextBox's focus</li> <li>Text inputs will now respond to overflow text and changes to the cursor position</li> <li>When adding a new color to a palette, the search query will reset and the new color will be selected</li> <li>Changed the icons for the Color and Gradient Editor toolbar buttons</li> <li>Differentiated the icon denoting a removal from a subtraction</li> <li>Removed the 99 quick palette color limit</li> <li>Settings will now visually indicate to the user if saving is disabled</li> </ul>"},{"location":"changelog/#021-2021-03-29","title":"[0.2.1] - 2021-03-29","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>The Color Properties window no longer tries to load in testing modes</li> <li>The Color Properties window will now show the loading screen if it is enabled on startup instead of being blank</li> </ul>"},{"location":"changelog/#020-2021-03-29","title":"[0.2.0] - 2021-03-29","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Added a Settings window</li> <li>Integrated the functionality of ColorProps into ColorPane, with the option to automatically load the window at startup in the Settings</li> <li>You can now view palettes in either a grid or list layout</li> <li>Added a palette of web colors</li> <li>Added sections to the palette list to distinguish between built-in and user-created palettes</li> <li>Added an editor page that lets you copy/paste between different color types</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>API loading is no longer occurs at startup by default, the user must now explicitly load it or set the option to automatically load it in the Settings</li> <li>Color Properties: You can now click anywhere inside a property list item to edit the color, not just on the item's color indicator</li> <li>Changed the behaviour of the palette grid double-click shortcut: clicking on the color at any time after it has been selected will set the current color, not just within the amount of time that would be considered a \"double click\"</li> <li>When searching for a palette color, if the selected color is included in the filtered list, it will now stay selected instead of being deselected</li> <li>You will now be asked to input a name before creating new palettes, with the option to disable this in the Settings</li> <li>The palette naming prompt will now show you what the actual new name will be if the inputted name is already being used</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>The titles of the editor windows now reset to an identifiable name once they are closed</li> <li>Setting the initial prompt value when calling <code>PromptForColor</code> no longer causes <code>OnColorChanged</code> to be called</li> <li>Improved the performance of multiple components, the effects of which will be particularly noticable when resizing editor windows or using the palettes page</li> <li>The editor page bar in the color editor window now correctly highlights the currently-chosen editor page</li> <li>Editor pages in the color editor now have the proper minimum width, previously the calculations did not take padding into account and ended up making them slightly smaller than the minimum</li> <li>Fixed improper behaviour in the color wheel due to some misplaced code: the color value should have updated when the left mouse button was pressed down on the saturation-brightness square, however it occurred when the mouse button was released instead</li> <li>If you close the Color Properties window while editing a property, the color editor window(s) should now close</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Removed the undocumented <code>OpenColorEditor</code> function from the API</li> <li>Removed the name restrictions on user-created palettes</li> </ul>"},{"location":"changelog/#012-2021-03-10","title":"[0.1.2] - 2021-03-10","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Added a toolbar button that lets the user attempt to drop the API script into CoreGui if it could not be done automatically</li> <li>Added toolbar button icons</li> <li>Added a warning when modifying the API script's Source</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Updated and fixed some documentation</li> <li>Changed the name of the color editor toolbar button to \"Color Editor\" (from just \"Editor\")</li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":"<ul> <li>Removed the undocumented <code>OpenColorSequenceEditor</code> function from the API (<code>OpenColorEditor</code> will be removed in future update)</li> </ul>"},{"location":"changelog/#011-2021-03-09","title":"[0.1.1] - 2021-03-09","text":""},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Now gracefully handles script injection</li> </ul>"},{"location":"changelog/#010-2021-03-09","title":"[0.1.0] - 2021-03-09","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>ColorPane first release</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>Features requests should be submitted through GitHub issue. Feature requests should align with ColorPane's purpose of being a general-purpose suite of color tools. Please be as detailed as possible, and include images and/or video if necessary. New features should be fully discussed before contributing any code.</p>"},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>Bugs should be submitted via GitHub issue. Make sure that the bug you're reporting isn't already part of another issue.</p> <p>Please include a detailed description and an image and/or video of the bug to make it easier to track down. If there's relevant error output in Studio, please include it.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>If you find any errors or places for improvement in the documentation, feel free to open an issue or submit a pull request. ColorPane's documentation uses Material for MkDocs (version 9.5.27 as of this writing).</p>"},{"location":"contributing/#translations","title":"Translations","text":"<p>To reach as many developers as possible, one of ColorPane's goals is to be fully translated into several languages. If you would like to help translate ColorPane, you can contribute to the Crowdin project. Translations for the documentation are currently not being accepted, but this may change in the future.</p> <p>Currently, the targeted languages are:</p> <ul> <li>Simplifed Chinese (<code>zh-CN</code>)</li> <li>Traditional Chinese (<code>zh-TW</code>)</li> <li>French (<code>fr</code>)</li> <li>German (<code>de</code>)</li> <li>Indonesian (<code>id</code>)</li> <li>Italian (<code>it</code>)</li> <li>Japanese (<code>jp</code>)</li> <li>Korean (<code>ko</code>)</li> <li>Portuguese (<code>pt-PT</code>)</li> <li>Russian (<code>ru</code>)</li> <li>Spanish (<code>es-ES</code>)</li> </ul>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":"<p>Note</p> <p>Code contributions should target the develop branch, unless they're critical fixes.</p> <p>If you have code you would like to contribute to ColorPane, please submit a pull request. ColorPane uses Rojo (version 7.4.1 as of this writing) for project management. When testing the plugin in Studio, serve <code>workspace.project.json</code> instead of the <code>default.project.json</code>. There will be 3 build objects in ServerStorage:</p> <ul> <li>CPTester, which is a debug plugin that provides direct access to the ColorPane API script from the Workspace</li> <li>Companion, the Companion plugin</li> <li>ColorPane, the ColorPane library</li> </ul>"},{"location":"contributing/#donations","title":"Donations","text":"<p>If you like ColorPane, consider donating!</p>"},{"location":"developer-guide/api-reference/","title":"ColorPane","text":"<p>Note</p> <p>The pages in the Developer Guide are for plugin developers who want to integrate ColorPane in their projects. If you simply want to use the color tools, you're looking for the the user guide.</p>"},{"location":"developer-guide/api-reference/#types","title":"Types","text":""},{"location":"developer-guide/api-reference/#colorpromptoptions","title":"ColorPromptOptions","text":"<pre><code>type ColorPromptOptions = {\n    PromptTitle: string?,\n    InitialColor: (Color | Color3)?,\n    ColorType: (\"Color\" | \"Color3\")?,\n    OnColorChanged: (((Color) -&gt; ()) | ((Color3) -&gt; ()))?\n}</code></pre> <p><code>ColorType</code> determines the type of value the Promise will resolve with, and the type of value passed to <code>OnColorChanged</code>.</p>"},{"location":"developer-guide/api-reference/#gradientpromptoptions","title":"GradientPromptOptions","text":"<pre><code>type GradientPromptOptions = {\n    PromptTitle: string?,\n    InitialGradient: (Gradient | ColorSequence)?,\n    InitialColorSpace: MixableColorType?,\n    InitialHueAdjustment: HueAdjustment?,\n    InitialPrecision: number?,\n    GradientType: (\"Gradient\" | \"ColorSequence\")?,\n    OnGradientChanged: (((Gradient) -&gt; ()) | ((ColorSequence) -&gt; ()))?\n}</code></pre> <p><code>GradientType</code> determines the type of value the Promise will resolve with, and the type of value passed to <code>OnGradientChanged</code>.</p>"},{"location":"developer-guide/api-reference/#enums","title":"Enums","text":""},{"location":"developer-guide/api-reference/#promptrejection","title":"PromptRejection","text":"<pre><code>{\n    InvalidPromptOptions,\n    PromptAlreadyOpen,\n    ReservationProblem,\n    PromptCancelled,\n    SameAsInitial\n}\n</code></pre> <ul> <li><code>PromptRejection.InvalidPromptOptions</code>: One or more of the prompt configuration options was invalid (bad value, wrong type, etc.)</li> <li><code>PromptRejection.PromptAlreadyOpen</code>: The prompt you were trying to open is already open</li> <li><code>PromptRejection.ReservationProblem</code>: If you were trying to open the color prompt, then the gradient prompt is currently open. If you were trying to open the gradient prompt, the color prompt is currently open.</li> <li><code>PromptRejection.PromptCancelled</code>: The user closed the prompt without confirming a color/gradient</li> <li><code>PromptRejection.SameAsInitial</code>: If you provided an initial color/gradient value, the user confirmed the exact same value</li> </ul>"},{"location":"developer-guide/api-reference/#promisestatus","title":"PromiseStatus","text":"<p>Same as <code>Promise.Status</code>.</p> <pre><code>{\n    Started,\n    Resolved,\n    Rejected,\n    Cancelled\n}\n</code></pre>"},{"location":"developer-guide/api-reference/#functions","title":"Functions","text":""},{"location":"developer-guide/api-reference/#iscolorpromptavailable","title":"IsColorPromptAvailable","text":"<pre><code>ColorPane.IsColorPromptAvailable(): boolean</code></pre> <p>Returns if a request to prompt for a color will succeed instead of immediately rejecting.</p>"},{"location":"developer-guide/api-reference/#isgradientpromptavailable","title":"IsGradientPromptAvailable","text":"<pre><code>ColorPane.IsGradientPromptAvailable(): boolean</code></pre> <p>Returns if a request to prompt for a gradient will succeed instead of immediately rejecting.</p>"},{"location":"developer-guide/api-reference/#promptforcolor","title":"PromptForColor","text":"<pre><code>ColorPane.PromptForColor(options: ColorPromptOptions?): Promise</code></pre> <p>Prompts the user for a color.</p> <pre><code>local colorPromise = ColorPane.PromptForColor({\n    PromptTitle = \"Hello, world!\",\n    InitialColor = Color3.new(0.1, 0.2, 0.3),\n\n    ColorType = \"Color3\",\n    OnColorChanged = print,\n})\n</code></pre> <p><code>OnColorChanged</code> must not yield. The specified <code>ColorType</code> and the type parameter to <code>OnColorChanged</code> should match, i.e.</p> <ul> <li><code>ColorType</code> is <code>\"Color3\"</code>, and <code>OnColorChanged</code> accepts a <code>Color3</code>, or</li> <li><code>ColorType</code> is <code>\"Color\"</code>, and <code>OnColorChanged</code> accepts a <code>Color</code></li> </ul> <p>but not</p> <ul> <li><code>ColorType</code> is <code>\"Color3\"</code>, and <code>OnColorChanged</code> accepts a <code>Color</code>, nor</li> <li><code>ColorType</code> is <code>\"Color\"</code>, and <code>OnColorChanged</code> accepts a <code>Color3</code></li> </ul>"},{"location":"developer-guide/api-reference/#promptforgradient","title":"PromptForGradient","text":"<pre><code>ColorPane.PromptForGradient(options: GradientPromptOptions?): Promise</code></pre> <p>Prompts the user for a gradient.</p> <pre><code>local gradientPromise = ColorPane.PromptForGradient({\n    PromptTitle = \"Hello, world!\",\n    InitialGradient = ColorSequence.new(Color3.new(0, 0, 0), Color3.new(1, 1, 1)),\n\n    GradientType = \"ColorSequence\",\n    OnGradientChanged = print,\n})\n</code></pre> <p><code>OnGradientChanged</code> must not yield. The specified <code>GradientType</code> and the type parameter to <code>OnGradientChanged</code> should match, i.e.</p> <ul> <li><code>GradientType</code> is <code>\"ColorSequence\"</code>, and <code>OnGradientChanged</code> accepts a <code>ColorSequence</code>, or</li> <li><code>GradientType</code> is <code>\"Gradient\"</code>, and <code>OnGradientChanged</code> accepts a <code>Gradient</code></li> </ul> <p>but not</p> <ul> <li><code>GradientType</code> is <code>\"ColorSequence\"</code>, and <code>OnGradientChanged</code> accepts a <code>Gradient</code>, nor</li> <li><code>GradientType</code> is <code>\"Gradient\"</code>, and <code>OnGradientChanged</code> accepts a <code>ColorSequence</code>.</li> </ul>"},{"location":"developer-guide/dev-guide-note/","title":"Dev guide note","text":"<p>Note</p> <p>The pages in the Developer Guide are for plugin developers who want to integrate ColorPane in their projects. If you simply want to use the color tools, you're looking for the the user guide.</p>"},{"location":"developer-guide/integration/","title":"Integration","text":"<p>Note</p> <p>The pages in the Developer Guide are for plugin developers who want to integrate ColorPane in their projects. If you simply want to use the color tools, you're looking for the the user guide.</p> <p>First, you'll need to grab the module from the Creator Store. If you use Rojo, you can alternatively add the GitHub repo as a submodule.</p>"},{"location":"developer-guide/integration/#initialisation","title":"Initialisation","text":"<p>Before we can start getting colors and gradients, we need to initialise the API. To do that, we'll simply call the function returned by the library script, which will give us the API.</p> <pre><code>local ColorPaneInit = require(path.to.library)\nlocal ColorPane = ColorPaneInit(plugin, \"MyProjectId\")\n</code></pre> <p>The parameters for the initialisation function are (1) a Plugin object and (2) a unique identifier, used to make sure each instance of ColorPane has its own plugin windows.</p>"},{"location":"developer-guide/integration/#getting-colors","title":"Getting Colors","text":"<p>Note</p> <p>Familiarity with the promise pattern, as well as the specific Promises from evaera's roblox-lua-promise library, is recommended. While some explanation is given here, the additional reading may help you.</p> <p>To prompt the user for colors, you will use <code>PromptForColor</code>.</p> <pre><code>local colorPromise = ColorPane.PromptForColor({\n    PromptTitle = \"Pick a color!\"\n    InitialColor = Color3.new(0.5, 0.5, 0.5),\n})\n</code></pre> <p>To customise the prompt, you can pass a table of options. The two options specified here are the most common. <code>PromptTitle</code> sets what the window text says, and <code>InitialColor</code> sets what color the user starts with (grey in this example).</p> <p> </p> <p>The API will return a Promise. The basic idea is that a Promise represents a value that will be given in the future. That Promise will either be fulfilled (resolved), or broken (rejected). In this example, if the Promise resolves, it will resolve with a Color3, and if it rejects, it will reject with an error object or message, depending on where the rejection came from.</p> <p>We can attach callbacks onto the Promise to handle resolutions and rejections with <code>Promise:andThen()</code>.</p> <pre><code>colorPromise\n    :andThen(function(color)\n        -- This function is called when the Promise resolves\n    end, function(err)\n        -- This function is called when the Promise rejects\n    end)\n</code></pre> <p>The Promise may reject for a variety of reasons, including:</p> <ul> <li>You passed some bad options into the function (e.g. setting <code>InitialColor</code> to a string)</li> <li>The color editor is already open</li> <li>The user decides to close the prompt without selecting a color</li> </ul> <p>If you don't want or need to use the Promise pattern, you can use <code>Promise:await()</code> to turn it into a synchronous function (a yielding function, like <code>task.wait</code>). The function will return values in the same manner as <code>pcall</code>: the first value tells you if the Promise resolved, and then any other values the Promise resolves/rejects with.</p> <pre><code>local resolved, value = colorPromise:await()\n\nif (resolved) then\n    -- do stuff with the color\nelse\n    -- do stuff with the error\nend\n</code></pre>"},{"location":"developer-guide/integration/#getting-gradients","title":"Getting Gradients","text":"<p>The same rules for Promises apply here as they do for getting colors. To prompt the user for gradients, you'll use <code>PromptForGradient</code>. The configuration options are slightly different here, and in this example, the Promise will resolve with a ColorSequence.</p> <pre><code>local gradientPromise = ColorPane.PromptForGradient({\n    PromptTitle = \"Pick a gradient!\",\n    InitialGradient = ColorSequence.new(\n        Color3.new(0, 0, 0),\n        Color3.new(1, 1, 1)\n    )\n})\n\ngradientPromise:andThen(function(gradient)\n    -- resolved\nend, function(err)\n    -- rejected\nend)\n</code></pre>"},{"location":"developer-guide/integration/#advanced","title":"Advanced","text":""},{"location":"developer-guide/integration/#previewing-changes","title":"Previewing Changes","text":"<p>An additional configuration option, <code>OnColorChanged</code> for <code>PromptForColor</code> and <code>OnGradientChanged</code> for <code>PromptForGradient</code>, lets you \"preview\" color changes. This option is a callback that will be called every time the user makes a modification to the color or gradient. This is useful for letting the user see their changes before committing to them.</p> <p>The callbacks you pass must not yield, meaning that you can't use <code>task.wait()</code>, <code>RBXScriptSignal:Wait()</code>, <code>Instance:WaitForChild()</code> or any other function that yields or suspends a thread.</p> <pre><code>ColorPane.PromptForColor({\n    InitialColor = Color3.new(1, 1, 1),\n\n    OnColorChanged = function(color)\n        -- your code here\n    end,\n})\n\nColorPane.PromptForGradient({\n    InitialGradient = ColorSequence.new(\n        Color3.new(0, 0, 0),\n        Color3.new(1, 1, 1)\n    ),\n\n    OnGradientChanged = function(gradient)\n        -- your code here\n    end,\n})\n</code></pre> <p>Warning</p> <p>The values passed to <code>OnColorChanged</code>/<code>OnGradientChanged</code> are for temporary use only. If the user cancels color selection, anything you've changed with the preview colors should be changed back to their original values.</p>"},{"location":"developer-guide/integration/#alternate-color-objects","title":"Alternate Color Objects","text":"<p>If you're familiar with the Color library, the API also allows you to prompt for these types of colors instead of Color3s and ColorSequences. Note that this will also affect the types of the values passed to <code>OnColorChanged</code>/<code>OnGradientChanged</code>.</p> <pre><code>ColorPane.PromptForColor({\n    ColorType = \"Color\",\n})  -- Will resolve with a Color instead of a Color3\n\nColorPane.PromptForGradient({\n    GradientType = \"Gradient\",\n})  -- Will resolve with a Gradient instead of a ColorSequence\n</code></pre> <p>For Gradients, you can also specify the options used for generating intermediate colors:</p> <pre><code>ColorPane.PromptForGradient({\n    GradientType = \"Gradient\",\n    InitialGradient = Gradient.fromColors(\n        Color.new(0, 0, 0),\n        Color.new(1, 1, 1)\n    ),\n\n    InitialColorSpace = \"Lab\",\n    InitialHueAdjustment = \"Longer\",\n    InitialPrecision = 0,\n})\n</code></pre>"},{"location":"developer-guide/integration/#plugin-permissions","title":"Plugin Permissions","text":"<p>ColorPane includes some functionality that requires certain plugin permissions. These permissions are not required, and the core functionality of ColorPane will still work without them. Your plugin itself, however, may need these permissions to work, and ColorPane will also be able to use them if granted.</p> <ul> <li>Script injection<ul> <li>Exporting palettes into the DataModel as a ModuleScript</li> </ul> </li> <li>HTTP requests<ul> <li>The Picular palette sends HTTP requests to backend.picular.co</li> <li>Importing palettes via URL, which can be from any domain</li> </ul> </li> </ul>"},{"location":"developer-guide/palette-format/","title":"Palette Format","text":"<p>When importing palettes, they must follow this JSON format:</p> <pre><code>{\n    \"name\": \"Palette Name\",\n\n    \"colors\": [\n        {\n            \"name\": \"Color Name\",\n            \"color\": [0, 0, 0]\n        },\n\n        {\n            \"name\": \"Another Color Name\",\n            \"color\": [0.5, 0.5, 0.5]\n        },\n\n        {\n            \"name\": \"Yet Another Color Name\",\n            \"color\": [1, 1, 1]\n        }\n    ]\n}\n</code></pre> <p>The color array of each color object is a 3-element array, with the elements representing the 3 sRGB channels, which typically range from [0, 1]. No two colors can share the same name, however any number of colors have have the same color array.</p> <p>If importing from a ModuleScript, the palette can also be a Lua table in the same format, e.g.</p> <pre><code>{\n    name = \"Palette Name\",\n\n    colors = {\n        {\n            name = \"Color Name\",\n            color = {0, 0, 0}\n        },\n\n        {\n            name = \"Another Color Name\",\n            color = {0.5, 0.5, 0.5}\n        },\n\n        {\n            name = \"Yet Another Color Name\",\n            color = {1, 1, 1}\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/color-editor/","title":"The Color Editor","text":""},{"location":"user-guide/color-editor/#color-wheel","title":"Color Wheel","text":"<p>The buttons below the wheel let you select color harmonies, which will be marked on the wheel using squares, while the main color marker will be a circle.</p>"},{"location":"user-guide/color-editor/#sliders","title":"Sliders","text":"<p>The editor includes several sliders:</p> <ul> <li>RGB</li> <li>CMYK</li> <li>HSB/L</li> <li>Monochrome</li> <li>Temperature</li> </ul>"},{"location":"user-guide/color-editor/#palettes","title":"Palettes","text":"<p>Warning</p> <p>If you don't have the Companion plugin installed, you won't be able to create, edit, or import palettes.</p> <p> </p> <p>Palettes let you store lists of colors. For most palettes, you will see (from top to bottom, left to right): a search bar, buttons to switch between grid or list layout, a button to add the current color to the palette, and the list of colors.</p> <p>There are several built-in palettes, some of which have custom layouts:</p> <ul> <li>BrickColors</li> <li>ColorBrewer</li> <li>Picular</li> <li>Web Colors</li> </ul> <p>The overflow menu (accessed using the  button) has several options such as creating new palettes, deleting existing palettes, and importing palettes.</p> <p> </p>"},{"location":"user-guide/color-editor/#layouts","title":"Layouts","text":"<p>The grid layout (pictured above) is the default layout, and allows for quick access to colors. Clicking on a color will select it, which then allows you to set the current color, remove the color, change its position in the palette, or rename it.</p> <p>The list layout (pictured below) is useful for palettes where color names are important.</p> <p> </p>"},{"location":"user-guide/color-editor/#import-and-export","title":"Import and Export","text":"<p>Palettes can be imported and exported, for uses such as sharing them with collaborators or backing them up. You can access the import/export options from the overflow menu (the Export option does not appear for built-in palettes).</p> <p>There are various ways to import palettes, but the UI will look similar for each method. After you extract the palette from the method you choose and it's in the correct format, the Import button will be enabled. You can also change the name of the palette before you import it, and the name input will be pre-filled with the name from the palette file/object.</p> <p>Note</p> <p>When importing via URL, you may be prompted by Studio to allow HTTP requests to the domain you're importing from.</p> <p> </p> <p>Palettes can be exported as ModuleScripts or StringValues to ServerStorage, and the exported object will contain the JSON string for the palette (as well as some metadata for ModuleScripts).</p> <p>Note</p> <p>When exporting to a ModuleScript, you may be prompted by Studio to allow script injection.</p> <p>Palettes cannot be exported to JSON files, as Studio does not have this capability. If you need a JSON file, you can copy the content of the JSON string into a file. For StringValue exports, you can copy the <code>Value</code> property. For ModuleScripts, copy the text inside the double-square-brackets (<code>[[...]]</code>).</p> <p> </p>"},{"location":"user-guide/color-editor/#colorbrewer-palette","title":"ColorBrewer Palette","text":"<p>ColorBrewer is a collection of color sets used in cartography. You can select the data type and number of classes, and the palette will display the various color sets that match the criteria.</p>"},{"location":"user-guide/color-editor/#picular-palette","title":"Picular Palette","text":"<p>Picular is an online tool that lets you search \"the color of anything\". You can use the search bar to search for things you want the color of, e.g. \"roblox\". There is also a search history tab where you can view previous entries you have looked up.</p>"},{"location":"user-guide/color-editor/#color-tools","title":"Color Tools","text":"<p>Various color tools are included, such as a color information tool, and a gradient picker.</p>"},{"location":"user-guide/color-editor/#color-info","title":"Color Info","text":"<p>The information tool shows the current color in different representations. You can copy text to paste somewhere else, and paste into the text boxes to change the current color (assuming what you paste follows the same format).</p>"},{"location":"user-guide/color-editor/#color-sorter","title":"Color Sorter","text":"<p>The sorter tool allows you to check how similar a list of colors is to a particular color, where the colors are listed from most to least similar after pressing Sort. The sorter uses CIEDE2000.</p>"},{"location":"user-guide/color-editor/#color-variations","title":"Color Variations","text":"<p>The variations tools shows various tints, tones, shades, and hue rotations of the current color, with an adjuster to change how many colors are shown.</p>"},{"location":"user-guide/color-editor/#gradient-pickers","title":"Gradient Pickers","text":"<p>The gradient pickers allow you to select a color from the different gradients in your gradient palette. Clicking anywhere on a gradient will set the current color to the color at that position. You can also click and drag to select colors as if it were a slider.</p>"},{"location":"user-guide/color-editor/#other-tools","title":"Other Tools","text":"<p>The two colors in a large square at the bottom-left of the editor represent the current (top) and initial (bottom) colors. You can click on the initial color if you want to reset the current color. The hex input below it accepts either 3 (<code>ABC</code> = <code>AABBCC</code>) or 6 (<code>ABCDEF</code>) digits.</p> <p>The list of colors to the right of the large square is the quick palette, and lets you temporarily store colors for quick access. You can add as many colors as you like, but you can't remove any colors. The number of colors that the quick palette displays depends on the size of the window (i.e. a larger window displays more colors).</p> <p>The  button selects a random color.</p>"},{"location":"user-guide/color-properties/","title":"Editing Color Properties","text":"<p>Note</p> <p>This feature is exclusive to the Companion plugin and isn't provided in the ColorPane library.</p> <p>The Color Properties window allows you to edit the color properties of objects in your projects.</p> <p> </p> <p>Each property will have a little icon next to its color button to indicate the type of property it is (the Part class icon for BrickColors, a rainbow color wheel for Color3s, and a vertical black and white gradient for ColorSequences). When multiple properties with the same name are listed, their class names will also be listed. Clicking on the color button will allow you to edit the property's value.</p> <p>Note</p> <p>The Terrain material properties you will see when you select a Terrain object (e.g. \"Asphalt Material\", \"Basalt Material\", etc.) are not real properties, but you can still use them to modify Terrain colors.</p>"},{"location":"user-guide/color-properties/#activation","title":"Activation","text":"<p>Color Properties will require manual activation the first time you use it. You will see a prompt when you open the window telling you that the API data has not been loaded (pictured below). On this screen you can load the API data and change the settings for automatic activation and caching (see the next section).</p> <p>Note</p> <p>API data is retrieved via HTTP requests to <code>setup.rbxcdn.com</code>. You may be prompted by Studio to allow HTTP requests to this domain when you use Color Properties. If you deny this permission, you will not be able to use this part of the Companion.</p> <p> </p>"},{"location":"user-guide/color-properties/#play-testing","title":"Play-Testing","text":"<p>Since HTTP requests are not allowed from plugins during play-testing, trying to use Color Properties won't work. You can enable the Cache Roblox API data setting to get around this, which will store the Roblox API data on your computer so that it can be used instead of having to make an HTTP request. Enabling this option may cause noticable pauses whenever the cache needs to be updated, since the size of the API data is quite large.</p>"},{"location":"user-guide/gradient-editor/","title":"The Gradient Editor","text":""},{"location":"user-guide/gradient-editor/#editing-keypoints","title":"Editing Keypoints","text":"<p>Keypoints can be added by clicking anywhere in the gradient view (as long as the cursor isn't snapped to another keypoint). Clicking on a keypoint will select it, which allows you to delete it, change its color or position, and use the left  or right  buttons (not the arrow keys) to swap its color with the keypoint on the left or right, respectively. You can also change the position by dragging it around the gradient view.</p>"},{"location":"user-guide/gradient-editor/#other-controls","title":"Other Controls","text":"<ul> <li>The  button reverses the order of the colors in the gradient</li> <li>The Snap input can be used to modify the interval at which keypoints snap</li> <li>The Reset button resets the gradient to its initial value</li> </ul> <p>The  button toggles showing the ColorSequence code for the gradient, if you wish to copy it. You'll probably have to increase the size of the window to view the whole code, but clicking on the text will select all of it, for quick copying.</p> <p> </p>"},{"location":"user-guide/gradient-editor/#gradient-palette","title":"Gradient Palette","text":"<p>You can open the gradient palette using the  button. Similar to color palettes, you can store gradients for later use. The first 3 gradients in the palette are built-in, so you cannot modify or delete them.</p>"},{"location":"user-guide/gradient-editor/#gradient-info","title":"Gradient Info","text":"<p>(TODO: this image is a placeholder)</p> <p> </p> <p>You can access gradient info with the  button. Editing gradient information is an advanced feature that allows you to create gradients with interpolation in different color spaces. The available options for the color space and hue interpolation are the same as those used in Color.mix.</p> <p>Increasing precision allows you to get a more visually-accurate gradient for the specified color space, but at the cost of the number of keypoints that you're allowed to insert.</p> <p>For non-RGB color spaces, the precision should be at least 1, otherwise the gradient will not look any different from itself in RGB space. For RGB space, the precision should always be 0, since ColorSequences already use RGB interpolation.</p>"},{"location":"user-guide/settings/","title":"Settings","text":"<p>Note</p> <p>Settings can only be modified if you have the Companion plugin installed.</p> <p>This page explains the various options in the Settings window, in the order that they appear.</p>"},{"location":"user-guide/settings/#colorpane-settings","title":"ColorPane Settings","text":"<p>These settings apply to all instances of ColorPane.</p> <ul> <li>Name palettes before creating them: If enabled, you will have the opportunity to change a palette's name before you create it. If not, you can only do that after the palette is created.</li> <li>Gradient keypoint snap %: The gradient editor's keypoint snap value.</li> </ul>"},{"location":"user-guide/settings/#companion-settings","title":"Companion Settings","text":"<p>These settings only apply to the Companion plugin itself.</p> <ul> <li>Automatically load the Roblox API data for Color Properties on startup: Used in Color Properties. If enabled, the plugin will automatically load Roblox API data, which lets you use Color Properties without having to manually activate it.</li> <li>Cache Roblox API data for use during testing sessions: Used in Color Properties. If enabled, Roblox API data will be saved to plugin settings, which lets you use Color Properties while testing your games.</li> </ul>"},{"location":"user-guide/tips/","title":"Tips and Tricks","text":""},{"location":"user-guide/tips/#color-editor","title":"Color Editor","text":""},{"location":"user-guide/tips/#page-pickers","title":"Page Pickers","text":"<ul> <li>On the Slider and Palette sections, you can use the scroll wheel with the mouse hovering over the dropdown button to quickly switch between pages.</li> </ul>"},{"location":"user-guide/tips/#palettes","title":"Palettes","text":"<ul> <li>If you have a color selected, you can use the Up, Down, Left, or Right keys to select a different color, and you can hold down the key to change selections faster.</li> <li>You can skip the confirmation screen to delete a palette if you hold down the Shift key before you click the Delete option.</li> <li>If you prefer to name palettes after you create them, there is an option in the Settings that lets you create palettes without naming them. They will have the default name New Palette.</li> </ul>"},{"location":"user-guide/tips/#gradient-editor","title":"Gradient Editor","text":"<ul> <li>If you have a keypoint selected, you can use the Left or Right arrow keys to select a different keypoint.</li> <li>You can right-click on a keypoint to delete it instead of having to use the  button.</li> </ul>"}]}